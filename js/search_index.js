var search_data = {"index":{"searchIndex":["lingo","agendaitem","app","attendee","abbreviator","debugger","decomposer","dehyphenizer","formatter","multiworder","nonewordfilter","objectfilter","sequencer","stemmer","porter","synonymer","textreader","textwriter","tokenizer","variator","vectorfilter","wordsearcher","backendnotavailableerror","backendnotfounderror","bufferedattendee","cli","call","config","configerror","configloaderror","ctl","database","crypter","gdbmstore","hashstore","libcdbstore","progress","sdbmstore","source","keyvalue","multikey","multivalue","singleword","wordclass","databaseerror","debug","filenotfounderror","invaliddatabaseconfigerror","language","char","dictionary","grammar","lexical","lexicalhash","token","word","wordform","libraryloaderror","lingoerror","missingconfigerror","namenotfounderror","nodatabaseconfigerror","nowritablestoreerror","progress","sourcefilenotfounderror","srv","tokenizeerror","version","web","erb","rack","auth","nuggets","<<()","<<()","<=>()","<=>()","<=>()","<=>()","==()","[]()","[]()","[]()","[]=()","[]=()","_clear()","_clear()","_clear()","_close()","_closed?()","_closed?()","_each()","_each()","_encode!()","_get()","_insert()","_insert_name()","_open()","_open()","_open()","_open()","_open()","_set()","_set()","_val()","add_files()","add_lexicals()","add_subscriber()","agree?()","append()","append_path()","attr?()","attr?()","attrs()","backend_from_file()","basename()","basepath()","call()","call()","cancel()","cancel_filter()","check_multiword_key()","class_name()","clean()","close()","close()","close()","close()","close()","closed?()","cmd()","compo_form()","config()","config_hash()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control_multi()","convert()","convert_line()","convert_line()","convert_line()","convert_line()","convert_line()","copy()","copy_list()","create()","create()","create_and_forward_multiword()","crypt()","ctl()","database_config()","debug()","decode()","defaults()","dehyphenize()","dehyphenized?()","delete()","deprecate()","deprecate()","dictionary()","dictionary_config()","digest()","do_archive()","do_clearstore()","do_demo()","do_help()","do_path()","do_rackup()","do_usage()","do_version()","doit()","doit()","each()","each()","each_affix()","encode()","eql?()","error()","file_type()","file_with_ext()","filter()","filter_html()","filter_pdf()","filter_pdftotext()","find()","find()","find_compound()","find_file()","find_seq()","find_store()","find_synonyms()","find_word()","find_word()","flush()","flush_lir_buffer()","form_at()","forward()","forward_nest()","forward_number_of_token()","forward_token()","full_compound?()","genders()","get()","get()","get_array()","get_backend()","get_class()","get_const()","get_files()","get_key()","get_re()","grammar()","has_key?()","hash()","identified?()","identify()","include_path()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init_app()","insert()","insert_after()","insert_before()","inspect()","inspect()","invite()","key_to_nodes()","lexical_hash()","lexicals()","list()","list()","listen()","load_config()","load_config()","missing_arg()","multiword_size()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_compound_head()","new_lexical()","new_lexicals()","no_args()","nodes_to_key()","norm()","open()","open()","open()","open()","open_file()","options_for()","opts()","overwrite?()","parse_options()","parse_options()","path_for()","path_for_scope()","permute_compound()","prepare_lex()","prepend_path()","print()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process_buffer()","process_buffer()","process_buffer()","process_buffer()","process_buffer?()","process_buffer?()","profile()","ps()","quit()","rackup()","realpath_for()","register()","rejected()","replace()","require_lib()","require_optional()","reset()","rule()","rules()","run()","select()","select_with_infix()","select_with_suffix()","send_abbr()","send_nonewords()","send_vectors()","set()","set()","set()","set_dic()","set_gra()","size()","skip_command()","skip_command!()","spool()","start()","stderr()","stdin()","stdin?()","stdout()","stdout?()","stem()","string_or_io()","t()","talk()","talk()","talk()","talk()","test_compound()","to_a()","to_a()","to_a()","to_h()","to_h()","to_json()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","tokenize()","tokenize_line()","tokenize_nest()","tokenize_open()","tokenize_rule()","unknown?()","uptodate!()","uptodate!()","uptodate?()","uptodate?()","uptodate?()","url_for()","usage()","use_backend()","valid_tokens_in_buffer()","variate()","walk()","warn()","warn()","warn()","warn()","with_tempfile()","word?()","copying","changelog","readme"],"longSearchIndex":["lingo","lingo::agendaitem","lingo::app","lingo::attendee","lingo::attendee::abbreviator","lingo::attendee::debugger","lingo::attendee::decomposer","lingo::attendee::dehyphenizer","lingo::attendee::formatter","lingo::attendee::multiworder","lingo::attendee::nonewordfilter","lingo::attendee::objectfilter","lingo::attendee::sequencer","lingo::attendee::stemmer","lingo::attendee::stemmer::porter","lingo::attendee::synonymer","lingo::attendee::textreader","lingo::attendee::textwriter","lingo::attendee::tokenizer","lingo::attendee::variator","lingo::attendee::vectorfilter","lingo::attendee::wordsearcher","lingo::backendnotavailableerror","lingo::backendnotfounderror","lingo::bufferedattendee","lingo::cli","lingo::call","lingo::config","lingo::configerror","lingo::configloaderror","lingo::ctl","lingo::database","lingo::database::crypter","lingo::database::gdbmstore","lingo::database::hashstore","lingo::database::libcdbstore","lingo::database::progress","lingo::database::sdbmstore","lingo::database::source","lingo::database::source::keyvalue","lingo::database::source::multikey","lingo::database::source::multivalue","lingo::database::source::singleword","lingo::database::source::wordclass","lingo::databaseerror","lingo::debug","lingo::filenotfounderror","lingo::invaliddatabaseconfigerror","lingo::language","lingo::language::char","lingo::language::dictionary","lingo::language::grammar","lingo::language::lexical","lingo::language::lexicalhash","lingo::language::token","lingo::language::word","lingo::language::wordform","lingo::libraryloaderror","lingo::lingoerror","lingo::missingconfigerror","lingo::namenotfounderror","lingo::nodatabaseconfigerror","lingo::nowritablestoreerror","lingo::progress","lingo::sourcefilenotfounderror","lingo::srv","lingo::tokenizeerror","lingo::version","lingo::web","lingo::web::erb","lingo::web::rack","lingo::web::rack::auth","nuggets","lingo::language::word#<<()","lingo::progress#<<()","lingo::agendaitem#<=>()","lingo::language::lexical#<=>()","lingo::language::word#<=>()","lingo::language::wordform#<=>()","lingo::language::wordform#==()","lingo::config#[]()","lingo::database#[]()","lingo::language::lexicalhash#[]()","lingo::config#[]=()","lingo::database#[]=()","lingo::database#_clear()","lingo::database::hashstore#_clear()","lingo::database::sdbmstore#_clear()","lingo::database#_close()","lingo::database#_closed?()","lingo::database::hashstore#_closed?()","lingo::database#_each()","lingo::database::hashstore#_each()","lingo::database#_encode!()","lingo::database#_get()","lingo::attendee::tokenizer#_insert()","lingo::attendee::tokenizer#_insert_name()","lingo::database#_open()","lingo::database::gdbmstore#_open()","lingo::database::hashstore#_open()","lingo::database::libcdbstore#_open()","lingo::database::sdbmstore#_open()","lingo::database#_set()","lingo::database::sdbmstore#_set()","lingo::database#_val()","lingo::attendee::textreader#add_files()","lingo::language::word#add_lexicals()","lingo::attendee#add_subscriber()","lingo::ctl#agree?()","lingo::attendee::tokenizer#append()","lingo#append_path()","lingo::language::lexical#attr?()","lingo::language::word#attr?()","lingo::language::word#attrs()","lingo::database#backend_from_file()","lingo#basename()","lingo#basepath()","lingo#call()","lingo::call#call()","lingo::attendee::textreader#cancel()","lingo::attendee::textreader#cancel_filter()","lingo::attendee::multiworder#check_multiword_key()","lingo::lingoerror#class_name()","lingo::language::token::clean()","lingo::database#close()","lingo::database::hashstore#close()","lingo::language::dictionary#close()","lingo::language::grammar#close()","lingo::language::lexicalhash#close()","lingo::database#closed?()","lingo::ctl::cmd()","lingo::language::word#compo_form()","lingo#config()","lingo::database#config_hash()","lingo::attendee::abbreviator#control()","lingo::attendee::debugger#control()","lingo::attendee::decomposer#control()","lingo::attendee::dehyphenizer#control()","lingo::attendee::multiworder#control()","lingo::attendee::nonewordfilter#control()","lingo::attendee::sequencer#control()","lingo::attendee::synonymer#control()","lingo::attendee::textreader#control()","lingo::attendee::textwriter#control()","lingo::attendee::tokenizer#control()","lingo::attendee::variator#control()","lingo::attendee::vectorfilter#control()","lingo::attendee::wordsearcher#control()","lingo::bufferedattendee#control_multi()","lingo::database#convert()","lingo::database::source::keyvalue#convert_line()","lingo::database::source::multikey#convert_line()","lingo::database::source::multivalue#convert_line()","lingo::database::source::singleword#convert_line()","lingo::database::source::wordclass#convert_line()","lingo::ctl#copy()","lingo::ctl#copy_list()","lingo::database#create()","lingo::database::libcdbstore#create()","lingo::attendee::multiworder#create_and_forward_multiword()","lingo::database::crypter#crypt()","lingo::ctl#ctl()","lingo#database_config()","lingo::attendee::debugger#debug()","lingo::database::crypter#decode()","lingo::cli#defaults()","lingo::attendee::dehyphenizer#dehyphenize()","lingo::attendee::dehyphenizer#dehyphenized?()","lingo::attendee::tokenizer#delete()","lingo#deprecate()","lingo::config#deprecate()","lingo::attendee#dictionary()","lingo#dictionary_config()","lingo::database::crypter::digest()","lingo::ctl#do_archive()","lingo::ctl#do_clearstore()","lingo::ctl#do_demo()","lingo::ctl#do_help()","lingo::ctl#do_path()","lingo::ctl#do_rackup()","lingo::ctl#do_usage()","lingo::ctl#do_version()","lingo::srv#doit()","lingo::web#doit()","lingo::database#each()","lingo::database::source#each()","lingo::language::dictionary#each_affix()","lingo::database::crypter#encode()","lingo::language::wordform#eql?()","lingo::lingoerror#error()","lingo::attendee::textreader#file_type()","lingo#file_with_ext()","lingo::attendee::textreader#filter()","lingo::attendee::textreader#filter_html()","lingo::attendee::textreader#filter_pdf()","lingo::attendee::textreader#filter_pdftotext()","lingo#find()","lingo::ctl#find()","lingo::language::grammar#find_compound()","lingo#find_file()","lingo::attendee::sequencer#find_seq()","lingo#find_store()","lingo::language::dictionary#find_synonyms()","lingo::attendee#find_word()","lingo::language::dictionary#find_word()","lingo::attendee#flush()","lingo::attendee::textwriter#flush_lir_buffer()","lingo::bufferedattendee#form_at()","lingo::attendee#forward()","lingo::attendee::tokenizer#forward_nest()","lingo::bufferedattendee#forward_number_of_token()","lingo::attendee::tokenizer#forward_token()","lingo::language::word#full_compound?()","lingo::language::word#genders()","lingo::config#get()","lingo::database::source::get()","lingo::attendee#get_array()","lingo::database#get_backend()","lingo::language::word#get_class()","lingo#get_const()","lingo::attendee::textreader#get_files()","lingo::attendee#get_key()","lingo::attendee#get_re()","lingo::attendee#grammar()","lingo::attendee#has_key?()","lingo::language::wordform#hash()","lingo::language::wordform#identified?()","lingo::language::word#identify()","lingo#include_path()","lingo::attendee::abbreviator#init()","lingo::attendee::debugger#init()","lingo::attendee::decomposer#init()","lingo::attendee::dehyphenizer#init()","lingo::attendee::formatter#init()","lingo::attendee::multiworder#init()","lingo::attendee::nonewordfilter#init()","lingo::attendee::objectfilter#init()","lingo::attendee::sequencer#init()","lingo::attendee::stemmer#init()","lingo::attendee::synonymer#init()","lingo::attendee::textreader#init()","lingo::attendee::textwriter#init()","lingo::attendee::tokenizer#init()","lingo::attendee::variator#init()","lingo::attendee::vectorfilter#init()","lingo::attendee::wordsearcher#init()","lingo::progress#init()","lingo::app#init_app()","lingo::attendee::tokenizer#insert()","lingo::attendee::tokenizer#insert_after()","lingo::attendee::tokenizer#insert_before()","lingo::agendaitem#inspect()","lingo::language::wordform#inspect()","lingo#invite()","lingo::config#key_to_nodes()","lingo#lexical_hash()","lingo::language::word#lexicals()","lingo#list()","lingo::ctl#list()","lingo::attendee#listen()","lingo::cli#load_config()","lingo::config#load_config()","lingo::ctl#missing_arg()","lingo::language::word#multiword_size()","lingo::new()","lingo::agendaitem::new()","lingo::attendee::new()","lingo::backendnotavailableerror::new()","lingo::backendnotfounderror::new()","lingo::bufferedattendee::new()","lingo::call::new()","lingo::config::new()","lingo::configerror::new()","lingo::configloaderror::new()","lingo::database::new()","lingo::database::progress::new()","lingo::database::source::new()","lingo::database::source::keyvalue::new()","lingo::database::source::multikey::new()","lingo::database::source::multivalue::new()","lingo::database::source::singleword::new()","lingo::database::source::wordclass::new()","lingo::databaseerror::new()","lingo::filenotfounderror::new()","lingo::language::dictionary::new()","lingo::language::grammar::new()","lingo::language::lexicalhash::new()","lingo::language::token::new()","lingo::language::word::new()","lingo::language::wordform::new()","lingo::libraryloaderror::new()","lingo::namenotfounderror::new()","lingo::nowritablestoreerror::new()","lingo::progress::new()","lingo::sourcefilenotfounderror::new()","lingo::tokenizeerror::new()","lingo::language::word#new_compound_head()","lingo::language::word#new_lexical()","lingo::language::word#new_lexicals()","lingo::ctl#no_args()","lingo::config#nodes_to_key()","lingo::language::word#norm()","lingo::database#open()","lingo::language::dictionary::open()","lingo::language::grammar::open()","lingo::language::lexicalhash::open()","lingo::attendee::textreader#open_file()","lingo#options_for()","lingo::cli#opts()","lingo::ctl#overwrite?()","lingo::app#parse_options()","lingo::ctl#parse_options()","lingo#path_for()","lingo::ctl#path_for_scope()","lingo::language::grammar#permute_compound()","lingo::database#prepare_lex()","lingo#prepend_path()","lingo::progress#print()","lingo::attendee::abbreviator#process()","lingo::attendee::debugger#process()","lingo::attendee::decomposer#process()","lingo::attendee::formatter#process()","lingo::attendee::nonewordfilter#process()","lingo::attendee::objectfilter#process()","lingo::attendee::stemmer#process()","lingo::attendee::synonymer#process()","lingo::attendee::textwriter#process()","lingo::attendee::tokenizer#process()","lingo::attendee::variator#process()","lingo::attendee::vectorfilter#process()","lingo::attendee::wordsearcher#process()","lingo::bufferedattendee#process()","lingo::attendee::dehyphenizer#process_buffer()","lingo::attendee::multiworder#process_buffer()","lingo::attendee::sequencer#process_buffer()","lingo::bufferedattendee#process_buffer()","lingo::attendee::sequencer#process_buffer?()","lingo::bufferedattendee#process_buffer?()","lingo::debug#profile()","lingo::debug#ps()","lingo::config#quit()","lingo::app#rackup()","lingo#realpath_for()","lingo::database#register()","lingo::database::source#rejected()","lingo::attendee::tokenizer#replace()","lingo::attendee#require_lib()","lingo#require_optional()","lingo#reset()","lingo::attendee::tokenizer#rule()","lingo::attendee::tokenizer#rules()","lingo::cli#run()","lingo::language::dictionary#select()","lingo::language::dictionary#select_with_infix()","lingo::language::dictionary#select_with_suffix()","lingo::attendee::abbreviator#send_abbr()","lingo::attendee::nonewordfilter#send_nonewords()","lingo::attendee::vectorfilter#send_vectors()","lingo::database::source#set()","lingo::database::source::multikey#set()","lingo::database::source::multivalue#set()","lingo::attendee#set_dic()","lingo::attendee#set_gra()","lingo::database::source#size()","lingo::attendee#skip_command()","lingo::attendee#skip_command!()","lingo::attendee::textreader#spool()","lingo#start()","lingo::config#stderr()","lingo::config#stdin()","lingo::attendee::textreader#stdin?()","lingo::config#stdout()","lingo::attendee::textwriter#stdout?()","lingo::attendee::stemmer::porter#stem()","lingo::attendee::textreader#string_or_io()","lingo::web#t()","lingo#talk()","lingo::attendee#talk()","lingo::call#talk()","lingo::srv#talk()","lingo::language::grammar#test_compound()","lingo::agendaitem#to_a()","lingo::language::wordform#to_a()","lingo::version#to_a()","lingo::config#to_h()","lingo::database#to_h()","lingo::app#to_json()","lingo::backendnotavailableerror#to_s()","lingo::backendnotfounderror#to_s()","lingo::configloaderror#to_s()","lingo::databaseerror#to_s()","lingo::filenotfounderror#to_s()","lingo::invaliddatabaseconfigerror#to_s()","lingo::language::lexical#to_s()","lingo::language::token#to_s()","lingo::language::word#to_s()","lingo::language::wordform#to_s()","lingo::libraryloaderror#to_s()","lingo::missingconfigerror#to_s()","lingo::namenotfounderror#to_s()","lingo::nodatabaseconfigerror#to_s()","lingo::nowritablestoreerror#to_s()","lingo::sourcefilenotfounderror#to_s()","lingo::tokenizeerror#to_s()","lingo::version#to_s()","lingo::language::lexical#to_str()","lingo::attendee::tokenizer#tokenize()","lingo::attendee::tokenizer#tokenize_line()","lingo::attendee::tokenizer#tokenize_nest()","lingo::attendee::tokenizer#tokenize_open()","lingo::attendee::tokenizer#tokenize_rule()","lingo::language::wordform#unknown?()","lingo::database#uptodate!()","lingo::database::hashstore#uptodate!()","lingo::database#uptodate?()","lingo::database::hashstore#uptodate?()","lingo::database::sdbmstore#uptodate?()","lingo::web#url_for()","lingo::ctl#usage()","lingo::database#use_backend()","lingo::bufferedattendee#valid_tokens_in_buffer()","lingo::attendee::variator#variate()","lingo#walk()","lingo#warn()","lingo::attendee#warn()","lingo::config#warn()","lingo::database#warn()","lingo::attendee::textreader#with_tempfile()","lingo::language::token#word?()","","",""],"info":[["Lingo","","Lingo.html","",""],["Lingo::AgendaItem","","Lingo/AgendaItem.html","",""],["Lingo::App","","Lingo/App.html","",""],["Lingo::Attendee","","Lingo/Attendee.html","","<p>Lingo ist als universelles Indexierungssystem entworfen worden. Seine\nStärke liegt in der einfachen  …\n"],["Lingo::Attendee::Abbreviator","","Lingo/Attendee/Abbreviator.html","","<p>Die Erkennung von Abkürzungen kann auf vielfältige Weise erfolgen. In jedem\nFall sollte eine sichere …\n"],["Lingo::Attendee::Debugger","","Lingo/Attendee/Debugger.html","","<p>Die Attendees von Lingo übergeben Daten über ihre Kommunikationskanäle und\nentweder kommt bei einer komplexen …\n"],["Lingo::Attendee::Decomposer","","Lingo/Attendee/Decomposer.html","","<p>Komposita, also zusammengesetzte Wörter, sind eine Spezialität der\ndeutschen Sprache (z.B. Indexierungssystem …\n"],["Lingo::Attendee::Dehyphenizer","","Lingo/Attendee/Dehyphenizer.html","","<p>Der Dehyphenizer … muss noch dokumentiert werden\n<p>Mögliche Verlinkung\n<p>Erwartet &mdash; Daten vom Typ <strong>Word</strong> z.B. …\n"],["Lingo::Attendee::Formatter","","Lingo/Attendee/Formatter.html","",""],["Lingo::Attendee::MultiWorder","","Lingo/Attendee/MultiWorder.html","","<p>Mit der bisher beschriebenen Vorgehensweise werden die durch den Tokenizer\nerkannten Token aufgelöst …\n"],["Lingo::Attendee::NonewordFilter","","Lingo/Attendee/NonewordFilter.html","","<p>Der NonewordFilter ermöglicht es, alle nicht erkannten Wörter aus dem\nDatenstrom zu selektieren und weiterzuleiten. …\n"],["Lingo::Attendee::ObjectFilter","","Lingo/Attendee/ObjectFilter.html","","<p>Der ObjectFilter ermöglicht es, beliebige Objekte aus dem Datenstrom\nherauszufiltern. Um die gewünschten …\n"],["Lingo::Attendee::Sequencer","","Lingo/Attendee/Sequencer.html","","<p>Der Sequencer ist von seiner Funktion her ähnlich dem Multiworder. Der\nMultiworder nutzt zur Erkennung …\n"],["Lingo::Attendee::Stemmer","","Lingo/Attendee/Stemmer.html","",""],["Lingo::Attendee::Stemmer::Porter","","Lingo/Attendee/Stemmer/Porter.html","",""],["Lingo::Attendee::Synonymer","","Lingo/Attendee/Synonymer.html","","<p>Der Synonymer untersucht die von anderen Attendees ermittelten Grundformen\neines Wortes und sucht in …\n"],["Lingo::Attendee::TextReader","","Lingo/Attendee/TextReader.html","","<p>Der TextReader ist eine klassische Datenquelle. Er liest eine oder mehrere\nDateien und gibt sie Zeilenweise …\n"],["Lingo::Attendee::TextWriter","","Lingo/Attendee/TextWriter.html","","<p>Der TextWriter ermöglicht die Umleitung des Datenstroms in eine Textdatei.\nDabei werden Objekte, die …\n"],["Lingo::Attendee::Tokenizer","","Lingo/Attendee/Tokenizer.html","","<p>Der Tokenizer zerlegt eine Textzeile in einzelne Token. Dies ist notwendig,\ndamit nachfolgende Attendees …\n"],["Lingo::Attendee::Variator","","Lingo/Attendee/Variator.html","","<p>Der Variator ermöglicht bei nicht erkannten Wörtern den listenbasierten\nAustausch einzelner Wortteile …\n"],["Lingo::Attendee::VectorFilter","","Lingo/Attendee/VectorFilter.html","","<p>Die Hauptaufgabe des VectorFilter ist die Erstellung eines\nDokumenten-Index-Vektor. Dabei werden die …\n"],["Lingo::Attendee::WordSearcher","","Lingo/Attendee/WordSearcher.html","","<p>Der WordSearcher ist das Herzstück von Lingo. Er macht die Hauptarbeit und\nversucht alle Token die nach …\n"],["Lingo::BackendNotAvailableError","","Lingo/BackendNotAvailableError.html","",""],["Lingo::BackendNotFoundError","","Lingo/BackendNotFoundError.html","",""],["Lingo::BufferedAttendee","","Lingo/BufferedAttendee.html","",""],["Lingo::CLI","","Lingo/CLI.html","",""],["Lingo::Call","","Lingo/Call.html","",""],["Lingo::Config","","Lingo/Config.html","",""],["Lingo::ConfigError","","Lingo/ConfigError.html","",""],["Lingo::ConfigLoadError","","Lingo/ConfigLoadError.html","",""],["Lingo::Ctl","","Lingo/Ctl.html","",""],["Lingo::Database","","Lingo/Database.html","","<p>Die Klasse Database stellt eine einheitliche Schnittstelle auf\nLingo-Datenbanken bereit. Die Identifizierung …\n"],["Lingo::Database::Crypter","","Lingo/Database/Crypter.html","","<p>Crypter ermöglicht die Ver- und Entschlüsselung von Wörterbüchern\n"],["Lingo::Database::GDBMStore","","Lingo/Database/GDBMStore.html","",""],["Lingo::Database::HashStore","","Lingo/Database/HashStore.html","",""],["Lingo::Database::LibCDBStore","","Lingo/Database/LibCDBStore.html","",""],["Lingo::Database::Progress","","Lingo/Database/Progress.html","",""],["Lingo::Database::SDBMStore","","Lingo/Database/SDBMStore.html","",""],["Lingo::Database::Source","","Lingo/Database/Source.html","","<p>Die Klasse Source stellt eine einheitliche Schnittstelle auf die\nunterschiedlichen Formate von Wörterbuch-Quelldateien …\n"],["Lingo::Database::Source::KeyValue","","Lingo/Database/Source/KeyValue.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>KeyValue</code>. Eine Zeile\n<code>&quot;Fachbegriff*Fachterminus\\n&quot;</code> …\n"],["Lingo::Database::Source::MultiKey","","Lingo/Database/Source/MultiKey.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>MultiKey</code>. Eine Zeile\n<code>&quot;Triumph;Sieg;Erfolg\\n&quot;</code> …\n"],["Lingo::Database::Source::MultiValue","","Lingo/Database/Source/MultiValue.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>MultiValue</code>. Eine Zeile\n<code>&quot;Triumph;Sieg;Erfolg\\n&quot;</code> …\n"],["Lingo::Database::Source::SingleWord","","Lingo/Database/Source/SingleWord.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>SingleWord</code>. Eine Zeile <code>&quot;Fachbegriff\\n&quot;</code>\n…\n"],["Lingo::Database::Source::WordClass","","Lingo/Database/Source/WordClass.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>WordClass</code>. Eine Zeile <code>&quot;essen,essen</code> …\n"],["Lingo::DatabaseError","","Lingo/DatabaseError.html","",""],["Lingo::Debug","","Lingo/Debug.html","",""],["Lingo::FileNotFoundError","","Lingo/FileNotFoundError.html","",""],["Lingo::InvalidDatabaseConfigError","","Lingo/InvalidDatabaseConfigError.html","",""],["Lingo::Language","","Lingo/Language.html","",""],["Lingo::Language::Char","","Lingo/Language/Char.html","",""],["Lingo::Language::Dictionary","","Lingo/Language/Dictionary.html","",""],["Lingo::Language::Grammar","","Lingo/Language/Grammar.html","","<p>Die Klasse Grammar beinhaltet grammatikalische Spezialitäten einer Sprache.\nDerzeit findet die Kompositumerkennung …\n"],["Lingo::Language::Lexical","","Lingo/Language/Lexical.html","","<p>Die Klasse Lexical, abgeleitet von der Klasse WordForm, stellt den\nContainer für eine Grundform eines …\n"],["Lingo::Language::LexicalHash","","Lingo/Language/LexicalHash.html","","<p>Die Klasse LexicalHash ermöglicht den Zugriff auf die Lingodatenbanken. Im\nGegensatz zur Klasse Database …\n"],["Lingo::Language::Token","","Lingo/Language/Token.html","","<p>Die Klasse Token, abgeleitet von der Klasse WordForm, stellt den Container\nfür ein einzelnes Wort eines …\n"],["Lingo::Language::Word","","Lingo/Language/Word.html","","<p>Die Klasse Word bündelt spezifische Eigenschaften eines Wortes mit den dazu\nnotwendigen Methoden.\n"],["Lingo::Language::WordForm","","Lingo/Language/WordForm.html","","<p>Die Klasse WordForm ist die Basisklasse für weitere Klassen, die im Rahmen\nder Objektstruktur eines  …\n"],["Lingo::LibraryLoadError","","Lingo/LibraryLoadError.html","",""],["Lingo::LingoError","","Lingo/LingoError.html","",""],["Lingo::MissingConfigError","","Lingo/MissingConfigError.html","",""],["Lingo::NameNotFoundError","","Lingo/NameNotFoundError.html","",""],["Lingo::NoDatabaseConfigError","","Lingo/NoDatabaseConfigError.html","",""],["Lingo::NoWritableStoreError","","Lingo/NoWritableStoreError.html","",""],["Lingo::Progress","","Lingo/Progress.html","",""],["Lingo::SourceFileNotFoundError","","Lingo/SourceFileNotFoundError.html","",""],["Lingo::Srv","","Lingo/Srv.html","",""],["Lingo::TokenizeError","","Lingo/TokenizeError.html","",""],["Lingo::Version","","Lingo/Version.html","",""],["Lingo::Web","","Lingo/Web.html","",""],["Lingo::Web::ERB","","Lingo/Web/ERB.html","",""],["Lingo::Web::Rack","","Lingo/Web/Rack.html","",""],["Lingo::Web::Rack::Auth","","Lingo/Web/Rack/Auth.html","",""],["Nuggets","","Nuggets.html","",""],["<<","Lingo::Language::Word","Lingo/Language/Word.html#method-i-3C-3C","(*lex)",""],["<<","Lingo::Progress","Lingo/Progress.html#method-i-3C-3C","(value)",""],["<=>","Lingo::AgendaItem","Lingo/AgendaItem.html#method-i-3C-3D-3E","(other)",""],["<=>","Lingo::Language::Lexical","Lingo/Language/Lexical.html#method-i-3C-3D-3E","(other)",""],["<=>","Lingo::Language::Word","Lingo/Language/Word.html#method-i-3C-3D-3E","(other)",""],["<=>","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-3C-3D-3E","(other)",""],["==","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-3D-3D","(other)",""],["[]","Lingo::Config","Lingo/Config.html#method-i-5B-5D","(key)",""],["[]","Lingo::Database","Lingo/Database.html#method-i-5B-5D","(key)",""],["[]","Lingo::Language::LexicalHash","Lingo/Language/LexicalHash.html#method-i-5B-5D","(key)",""],["[]=","Lingo::Config","Lingo/Config.html#method-i-5B-5D-3D","(key, val)",""],["[]=","Lingo::Database","Lingo/Database.html#method-i-5B-5D-3D","(key, val)",""],["_clear","Lingo::Database","Lingo/Database.html#method-i-_clear","()",""],["_clear","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-_clear","()",""],["_clear","Lingo::Database::SDBMStore","Lingo/Database/SDBMStore.html#method-i-_clear","()",""],["_close","Lingo::Database","Lingo/Database.html#method-i-_close","()",""],["_closed?","Lingo::Database","Lingo/Database.html#method-i-_closed-3F","()",""],["_closed?","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-_closed-3F","()","<p>Never closed.\n"],["_each","Lingo::Database","Lingo/Database.html#method-i-_each","()",""],["_each","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-_each","()","<p>Dup key, because we&#39;re reusing everything.\n"],["_encode!","Lingo::Database","Lingo/Database.html#method-i-_encode-21","(str)",""],["_get","Lingo::Database","Lingo/Database.html#method-i-_get","(key)",""],["_insert","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-_insert","(index, rules)",""],["_insert_name","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-_insert_name","(name, rules, offset)",""],["_open","Lingo::Database","Lingo/Database.html#method-i-_open","()",""],["_open","Lingo::Database::GDBMStore","Lingo/Database/GDBMStore.html#method-i-_open","()",""],["_open","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-_open","()",""],["_open","Lingo::Database::LibCDBStore","Lingo/Database/LibCDBStore.html#method-i-_open","()",""],["_open","Lingo::Database::SDBMStore","Lingo/Database/SDBMStore.html#method-i-_open","()",""],["_set","Lingo::Database","Lingo/Database.html#method-i-_set","(key, val)",""],["_set","Lingo::Database::SDBMStore","Lingo/Database/SDBMStore.html#method-i-_set","(key, val)",""],["_val","Lingo::Database","Lingo/Database.html#method-i-_val","(key)",""],["add_files","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-add_files","(path, glob, recursive = false)",""],["add_lexicals","Lingo::Language::Word","Lingo/Language/Word.html#method-i-add_lexicals","(lex)",""],["add_subscriber","Lingo::Attendee","Lingo/Attendee.html#method-i-add_subscriber","(subscriber)",""],["agree?","Lingo::Ctl","Lingo/Ctl.html#method-i-agree-3F","(msg)",""],["append","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-append","(*rules)",""],["append_path","Lingo","Lingo.html#method-i-append_path","(*path)",""],["attr?","Lingo::Language::Lexical","Lingo/Language/Lexical.html#method-i-attr-3F","(attr)",""],["attr?","Lingo::Language::Word","Lingo/Language/Word.html#method-i-attr-3F","(*attr)",""],["attrs","Lingo::Language::Word","Lingo/Language/Word.html#method-i-attrs","(compound_parts = true)",""],["backend_from_file","Lingo::Database","Lingo/Database.html#method-i-backend_from_file","(file)",""],["basename","Lingo","Lingo.html#method-i-basename","(type, file)",""],["basepath","Lingo","Lingo.html#method-i-basepath","(type, file)",""],["call","Lingo","Lingo.html#method-i-call","(cfg = find(:config, 'lingo-call'), args = [], &block)",""],["call","Lingo::Call","Lingo/Call.html#method-i-call","()",""],["cancel","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-cancel","(msg)",""],["cancel_filter","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-cancel_filter","(type, name, what = :gem)",""],["check_multiword_key","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-check_multiword_key","(len)","<p>Prüft einen definiert langen Schlüssel ab Position 0 im Buffer\n"],["class_name","Lingo::LingoError","Lingo/LingoError.html#method-i-class_name","()",""],["clean","Lingo::Language::Token","Lingo/Language/Token.html#method-c-clean","(attr)",""],["close","Lingo::Database","Lingo/Database.html#method-i-close","()",""],["close","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-close","()","<p>Never close, because we can&#39;t restore.\n"],["close","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-close","()",""],["close","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-close","()",""],["close","Lingo::Language::LexicalHash","Lingo/Language/LexicalHash.html#method-i-close","()",""],["closed?","Lingo::Database","Lingo/Database.html#method-i-closed-3F","()",""],["cmd","Lingo::Ctl","Lingo/Ctl.html#method-c-cmd","(name, short, desc, args = nil, default = nil)",""],["compo_form","Lingo::Language::Word","Lingo/Language/Word.html#method-i-compo_form","()",""],["config","Lingo","Lingo.html#method-i-config","()",""],["config_hash","Lingo::Database","Lingo/Database.html#method-i-config_hash","()",""],["control","Lingo::Attendee::Abbreviator","Lingo/Attendee/Abbreviator.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::Debugger","Lingo/Attendee/Debugger.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::Decomposer","Lingo/Attendee/Decomposer.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::NonewordFilter","Lingo/Attendee/NonewordFilter.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::Synonymer","Lingo/Attendee/Synonymer.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::Variator","Lingo/Attendee/Variator.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::VectorFilter","Lingo/Attendee/VectorFilter.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::WordSearcher","Lingo/Attendee/WordSearcher.html#method-i-control","(cmd, param)",""],["control_multi","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-control_multi","(cmd)",""],["convert","Lingo::Database","Lingo/Database.html#method-i-convert","(verbose = lingo.config.stderr.tty?)",""],["convert_line","Lingo::Database::Source::KeyValue","Lingo/Database/Source/KeyValue.html#method-i-convert_line","(line, key, val)",""],["convert_line","Lingo::Database::Source::MultiKey","Lingo/Database/Source/MultiKey.html#method-i-convert_line","(line, key, val)",""],["convert_line","Lingo::Database::Source::MultiValue","Lingo/Database/Source/MultiValue.html#method-i-convert_line","(line, key, val)",""],["convert_line","Lingo::Database::Source::SingleWord","Lingo/Database/Source/SingleWord.html#method-i-convert_line","(line, key, val)",""],["convert_line","Lingo::Database::Source::WordClass","Lingo/Database/Source/WordClass.html#method-i-convert_line","(line, key, val)",""],["copy","Lingo::Ctl","Lingo/Ctl.html#method-i-copy","(what)",""],["copy_list","Lingo::Ctl","Lingo/Ctl.html#method-i-copy_list","(what)",""],["create","Lingo::Database","Lingo/Database.html#method-i-create","()",""],["create","Lingo::Database::LibCDBStore","Lingo/Database/LibCDBStore.html#method-i-create","()",""],["create_and_forward_multiword","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-create_and_forward_multiword","(len, lex)",""],["crypt","Lingo::Database::Crypter","Lingo/Database/Crypter.html#method-i-crypt","(method, key, val)",""],["ctl","Lingo::Ctl","Lingo/Ctl.html#method-i-ctl","()",""],["database_config","Lingo","Lingo.html#method-i-database_config","(id)",""],["debug","Lingo::Attendee::Debugger","Lingo/Attendee/Debugger.html#method-i-debug","(obj, cond)",""],["decode","Lingo::Database::Crypter","Lingo/Database/Crypter.html#method-i-decode","(key, val)",""],["defaults","Lingo::CLI","Lingo/CLI.html#method-i-defaults","()",""],["dehyphenize","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-dehyphenize","(form)",""],["dehyphenized?","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-dehyphenized-3F","(word)",""],["delete","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-delete","(*names)",""],["deprecate","Lingo","Lingo.html#method-i-deprecate","(old, new, obj = self)",""],["deprecate","Lingo::Config","Lingo/Config.html#method-i-deprecate","(old, new, obj = self)",""],["dictionary","Lingo::Attendee","Lingo/Attendee.html#method-i-dictionary","(src, mod)",""],["dictionary_config","Lingo","Lingo.html#method-i-dictionary_config","()",""],["digest","Lingo::Database::Crypter","Lingo/Database/Crypter.html#method-c-digest","(key)",""],["do_archive","Lingo::Ctl","Lingo/Ctl.html#method-i-do_archive","()",""],["do_clearstore","Lingo::Ctl","Lingo/Ctl.html#method-i-do_clearstore","()",""],["do_demo","Lingo::Ctl","Lingo/Ctl.html#method-i-do_demo","()",""],["do_help","Lingo::Ctl","Lingo/Ctl.html#method-i-do_help","(opts = nil)",""],["do_path","Lingo::Ctl","Lingo/Ctl.html#method-i-do_path","()",""],["do_rackup","Lingo::Ctl","Lingo/Ctl.html#method-i-do_rackup","(doit = true)",""],["do_usage","Lingo::Ctl","Lingo/Ctl.html#method-i-do_usage","(msg = nil)",""],["do_version","Lingo::Ctl","Lingo/Ctl.html#method-i-do_version","(doit = true)",""],["doit","Lingo::Srv","Lingo/Srv.html#method-i-doit","()",""],["doit","Lingo::Web","Lingo/Web.html#method-i-doit","()",""],["each","Lingo::Database","Lingo/Database.html#method-i-each","()",""],["each","Lingo::Database::Source","Lingo/Database/Source.html#method-i-each","()",""],["each_affix","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-each_affix","(str, affix = :suffix)",""],["encode","Lingo::Database::Crypter","Lingo/Database/Crypter.html#method-i-encode","(key, val)",""],["eql?","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-eql-3F","(other)",""],["error","Lingo::LingoError","Lingo/LingoError.html#method-i-error","(msg = 'An error occurred')",""],["file_type","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-file_type","(io, path)",""],["file_with_ext","Lingo","Lingo.html#method-i-file_with_ext","(file, options)",""],["filter","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-filter","(io, path, progress)",""],["filter_html","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-filter_html","(io, xml = false)",""],["filter_pdf","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-filter_pdf","(io)",""],["filter_pdftotext","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-filter_pdftotext","(io, path, progress)",""],["find","Lingo","Lingo.html#method-i-find","(type, file, options = {})",""],["find","Lingo::Ctl","Lingo/Ctl.html#method-i-find","(what, doit = true)",""],["find_compound","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-find_compound","(str, level = 1, tail = false)","<p>find_compound(str) -&gt; word wenn level=1 find_compound(str) -&gt; [lex,\nsta] wenn level!=1\n<p>find_compound …\n"],["find_file","Lingo","Lingo.html#method-i-find_file","(file, path, options)",""],["find_seq","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-find_seq","(mat, buf, map, seq)",""],["find_store","Lingo","Lingo.html#method-i-find_store","(file, path, options)",""],["find_synonyms","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-find_synonyms","(obj, syn = [], com = true)",""],["find_word","Lingo::Attendee","Lingo/Attendee.html#method-i-find_word","(f, d = @dic, g = @gra)",""],["find_word","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-find_word","(str)","<p><em>dic</em>.find_word( <em>aString</em> ) -&gt; <em>aNewWord</em>\n<p>Erstellt aus dem String ein Wort und sucht nach diesem im Wörterbuch. …\n"],["flush","Lingo::Attendee","Lingo/Attendee.html#method-i-flush","(buffer)",""],["flush_lir_buffer","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-flush_lir_buffer","()",""],["form_at","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-form_at","(index, klass = WordForm)",""],["forward","Lingo::Attendee","Lingo/Attendee.html#method-i-forward","(obj, param = nil)",""],["forward_nest","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-forward_nest","(match, rest, nest)",""],["forward_number_of_token","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-forward_number_of_token","(len = default = @buffer.size, punct = !default)",""],["forward_token","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-forward_token","(*args)",""],["full_compound?","Lingo::Language::Word","Lingo/Language/Word.html#method-i-full_compound-3F","()",""],["genders","Lingo::Language::Word","Lingo/Language/Word.html#method-i-genders","(compound_parts = true)",""],["get","Lingo::Config","Lingo/Config.html#method-i-get","(key, *names)",""],["get","Lingo::Database::Source","Lingo/Database/Source.html#method-c-get","(name, *args)",""],["get_array","Lingo::Attendee","Lingo/Attendee.html#method-i-get_array","(key, default = nil, method = nil)",""],["get_backend","Lingo::Database","Lingo/Database.html#method-i-get_backend","(mod)",""],["get_class","Lingo::Language::Word","Lingo/Language/Word.html#method-i-get_class","(wc_re)","<p>Gibt genau die Grundform der Wortklasse zurück, die der RegExp des\nÜbergabe-Parameters entspricht, z.B. …\n"],["get_const","Lingo","Lingo.html#method-i-get_const","(name, klass = self)",""],["get_files","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-get_files","()",""],["get_key","Lingo::Attendee","Lingo/Attendee.html#method-i-get_key","(key, default = nodefault = true)",""],["get_re","Lingo::Attendee","Lingo/Attendee.html#method-i-get_re","(key, default = nil, standard = nil)",""],["grammar","Lingo::Attendee","Lingo/Attendee.html#method-i-grammar","(src, mod)",""],["has_key?","Lingo::Attendee","Lingo/Attendee.html#method-i-has_key-3F","(key)",""],["hash","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-hash","()",""],["identified?","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-identified-3F","()",""],["identify","Lingo::Language::Word","Lingo/Language/Word.html#method-i-identify","(lex, wc = nil)",""],["include_path","Lingo","Lingo.html#method-i-include_path","(path, pre = false)",""],["init","Lingo::Attendee::Abbreviator","Lingo/Attendee/Abbreviator.html#method-i-init","()",""],["init","Lingo::Attendee::Debugger","Lingo/Attendee/Debugger.html#method-i-init","()",""],["init","Lingo::Attendee::Decomposer","Lingo/Attendee/Decomposer.html#method-i-init","()",""],["init","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-init","()",""],["init","Lingo::Attendee::Formatter","Lingo/Attendee/Formatter.html#method-i-init","()",""],["init","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-init","()",""],["init","Lingo::Attendee::NonewordFilter","Lingo/Attendee/NonewordFilter.html#method-i-init","()",""],["init","Lingo::Attendee::ObjectFilter","Lingo/Attendee/ObjectFilter.html#method-i-init","()",""],["init","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-init","()",""],["init","Lingo::Attendee::Stemmer","Lingo/Attendee/Stemmer.html#method-i-init","()",""],["init","Lingo::Attendee::Synonymer","Lingo/Attendee/Synonymer.html#method-i-init","()",""],["init","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-init","()","<p>TODO: FILE und LIR-FILE (?)\n"],["init","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-init","()",""],["init","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-init","()",""],["init","Lingo::Attendee::Variator","Lingo/Attendee/Variator.html#method-i-init","()",""],["init","Lingo::Attendee::VectorFilter","Lingo/Attendee/VectorFilter.html#method-i-init","()",""],["init","Lingo::Attendee::WordSearcher","Lingo/Attendee/WordSearcher.html#method-i-init","()",""],["init","Lingo::Progress","Lingo/Progress.html#method-i-init","(max, doit = @doit)",""],["init_app","Lingo::App","Lingo/App.html#method-i-init_app","(file, *args, &block)",""],["insert","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-insert","(*rules)",""],["insert_after","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-insert_after","(name, *rules)",""],["insert_before","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-insert_before","(name, *rules)",""],["inspect","Lingo::AgendaItem","Lingo/AgendaItem.html#method-i-inspect","()",""],["inspect","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-inspect","()",""],["invite","Lingo","Lingo.html#method-i-invite","(list = config['meeting/attendees'])",""],["key_to_nodes","Lingo::Config","Lingo/Config.html#method-i-key_to_nodes","(key)",""],["lexical_hash","Lingo","Lingo.html#method-i-lexical_hash","(src)",""],["lexicals","Lingo::Language::Word","Lingo/Language/Word.html#method-i-lexicals","(compound_parts = true)",""],["list","Lingo","Lingo.html#method-i-list","(type, options = {})",""],["list","Lingo::Ctl","Lingo/Ctl.html#method-i-list","(what, doit = true)",""],["listen","Lingo::Attendee","Lingo/Attendee.html#method-i-listen","(obj)",""],["load_config","Lingo::CLI","Lingo/CLI.html#method-i-load_config","(*)",""],["load_config","Lingo::Config","Lingo/Config.html#method-i-load_config","(key, type = key.to_sym)",""],["missing_arg","Lingo::Ctl","Lingo/Ctl.html#method-i-missing_arg","(arg)",""],["multiword_size","Lingo::Language::Word","Lingo/Language/Word.html#method-i-multiword_size","(wc_re = LA_MULTIWORD)",""],["new","Lingo","Lingo.html#method-c-new","(*args)",""],["new","Lingo::AgendaItem","Lingo/AgendaItem.html#method-c-new","(cmd, param = nil)",""],["new","Lingo::Attendee","Lingo/Attendee.html#method-c-new","(config, lingo)",""],["new","Lingo::BackendNotAvailableError","Lingo/BackendNotAvailableError.html#method-c-new","(mod, file)",""],["new","Lingo::BackendNotFoundError","Lingo/BackendNotFoundError.html#method-c-new","(file)",""],["new","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-c-new","(config, lingo)",""],["new","Lingo::Call","Lingo/Call.html#method-c-new","(args = [])",""],["new","Lingo::Config","Lingo/Config.html#method-c-new","(*args)",""],["new","Lingo::ConfigError","Lingo/ConfigError.html#method-c-new","(id)",""],["new","Lingo::ConfigLoadError","Lingo/ConfigLoadError.html#method-c-new","(err)",""],["new","Lingo::Database","Lingo/Database.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Progress","Lingo/Database/Progress.html#method-c-new","(obj, src, doit = true)",""],["new","Lingo::Database::Source","Lingo/Database/Source.html#method-c-new","(id, lingo, def_wc_default = nil)",""],["new","Lingo::Database::Source::KeyValue","Lingo/Database/Source/KeyValue.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::MultiKey","Lingo/Database/Source/MultiKey.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::MultiValue","Lingo/Database/Source/MultiValue.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::SingleWord","Lingo/Database/Source/SingleWord.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::WordClass","Lingo/Database/Source/WordClass.html#method-c-new","(id, lingo)",""],["new","Lingo::DatabaseError","Lingo/DatabaseError.html#method-c-new","(action, file, err)",""],["new","Lingo::FileNotFoundError","Lingo/FileNotFoundError.html#method-c-new","(name)",""],["new","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-c-new","(config, lingo)",""],["new","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-c-new","(config, lingo)",""],["new","Lingo::Language::LexicalHash","Lingo/Language/LexicalHash.html#method-c-new","(id, lingo)",""],["new","Lingo::Language::Token","Lingo/Language/Token.html#method-c-new","(*)",""],["new","Lingo::Language::Word","Lingo/Language/Word.html#method-c-new","(form, attr = WA_UNSET)","<p>Exakte Representation der originären Zeichenkette, so wie sie im Satz\ngefunden wurde, z.B. <code>form = &quot;RubyLing&quot;</code> …\n"],["new","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-c-new","(form, attr = WA_UNSET, src = nil)",""],["new","Lingo::LibraryLoadError","Lingo/LibraryLoadError.html#method-c-new","(klass, lib, err)",""],["new","Lingo::NameNotFoundError","Lingo/NameNotFoundError.html#method-c-new","(klass, name)",""],["new","Lingo::NoWritableStoreError","Lingo/NoWritableStoreError.html#method-c-new","(file, path)",""],["new","Lingo::Progress","Lingo/Progress.html#method-c-new","(obj, max, name = nil, doit = true, text = 'progress', nl = true, &block)",""],["new","Lingo::SourceFileNotFoundError","Lingo/SourceFileNotFoundError.html#method-c-new","(name, id)",""],["new","Lingo::TokenizeError","Lingo/TokenizeError.html#method-c-new","(line, file, num, err)",""],["new_compound_head","Lingo::Language::Word","Lingo/Language/Word.html#method-i-new_compound_head","(lex, attr = WA_UNSET)",""],["new_lexical","Lingo::Language::Word","Lingo/Language/Word.html#method-i-new_lexical","(form, attr, lex_attr)",""],["new_lexicals","Lingo::Language::Word","Lingo/Language/Word.html#method-i-new_lexicals","(form, attr, lex)",""],["no_args","Lingo::Ctl","Lingo/Ctl.html#method-i-no_args","()",""],["nodes_to_key","Lingo::Config","Lingo/Config.html#method-i-nodes_to_key","(nodes)",""],["norm","Lingo::Language::Word","Lingo/Language/Word.html#method-i-norm","()",""],["open","Lingo::Database","Lingo/Database.html#method-i-open","(*args, &block)",""],["open","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-c-open","(*args)",""],["open","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-c-open","(*args)",""],["open","Lingo::Language::LexicalHash","Lingo/Language/LexicalHash.html#method-c-open","(*args)",""],["open_file","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-open_file","(path)",""],["options_for","Lingo","Lingo.html#method-i-options_for","(type, options = {})",""],["opts","Lingo::CLI","Lingo/CLI.html#method-i-opts","(opts)",""],["overwrite?","Lingo::Ctl","Lingo/Ctl.html#method-i-overwrite-3F","(target, unlink = false)",""],["parse_options","Lingo::App","Lingo/App.html#method-i-parse_options","(lingo_options = false)",""],["parse_options","Lingo::Ctl","Lingo/Ctl.html#method-i-parse_options","()",""],["path_for","Lingo","Lingo.html#method-i-path_for","(options)",""],["path_for_scope","Lingo::Ctl","Lingo/Ctl.html#method-i-path_for_scope","(scope = OPTIONS[:scope])",""],["permute_compound","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-permute_compound","(ret, str, level, tail)",""],["prepare_lex","Lingo::Database","Lingo/Database.html#method-i-prepare_lex","()",""],["prepend_path","Lingo","Lingo.html#method-i-prepend_path","(*path)",""],["print","Lingo::Progress","Lingo/Progress.html#method-i-print","(*args)",""],["process","Lingo::Attendee::Abbreviator","Lingo/Attendee/Abbreviator.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Debugger","Lingo/Attendee/Debugger.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Decomposer","Lingo/Attendee/Decomposer.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Formatter","Lingo/Attendee/Formatter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::NonewordFilter","Lingo/Attendee/NonewordFilter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::ObjectFilter","Lingo/Attendee/ObjectFilter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Stemmer","Lingo/Attendee/Stemmer.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Synonymer","Lingo/Attendee/Synonymer.html#method-i-process","(obj)",""],["process","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Variator","Lingo/Attendee/Variator.html#method-i-process","(obj)",""],["process","Lingo::Attendee::VectorFilter","Lingo/Attendee/VectorFilter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::WordSearcher","Lingo/Attendee/WordSearcher.html#method-i-process","(obj)",""],["process","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-process","(obj)",""],["process_buffer","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-process_buffer","()",""],["process_buffer","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-process_buffer","()",""],["process_buffer","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-process_buffer","()",""],["process_buffer","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-process_buffer","()",""],["process_buffer?","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-process_buffer-3F","()",""],["process_buffer?","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-process_buffer-3F","()",""],["profile","Lingo::Debug","Lingo/Debug.html#method-i-profile","(base)",""],["ps","Lingo::Debug","Lingo/Debug.html#method-i-ps","(name)",""],["quit","Lingo::Config","Lingo/Config.html#method-i-quit","(*args)",""],["rackup","Lingo::App","Lingo/App.html#method-i-rackup","(name)",""],["realpath_for","Lingo","Lingo.html#method-i-realpath_for","(pn, path)",""],["register","Lingo::Database","Lingo/Database.html#method-i-register","(klass, ext, prio = -1, meth = true)",""],["rejected","Lingo::Database::Source","Lingo/Database/Source.html#method-i-rejected","()",""],["replace","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-replace","(name, expr = nil)",""],["require_lib","Lingo::Attendee","Lingo/Attendee.html#method-i-require_lib","(lib)",""],["require_optional","Lingo","Lingo.html#method-i-require_optional","(lib)",""],["reset","Lingo","Lingo.html#method-i-reset","(close = true)",""],["rule","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-rule","(name)",""],["rules","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-rules","(name)",""],["run","Lingo::CLI","Lingo/CLI.html#method-i-run","(arguments)",""],["select","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-select","(str, lex = [])","<p><em>dic</em>.select( <em>aString</em> ) -&gt; <em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten Treffer …\n"],["select_with_infix","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-select_with_infix","(str)","<p><em>dic</em>.select_with_infix( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten …\n"],["select_with_suffix","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-select_with_suffix","(str)","<p><em>dic</em>.select_with_suffix( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten …\n"],["send_abbr","Lingo::Attendee::Abbreviator","Lingo/Attendee/Abbreviator.html#method-i-send_abbr","(abbr, obj = nil)",""],["send_nonewords","Lingo::Attendee::NonewordFilter","Lingo/Attendee/NonewordFilter.html#method-i-send_nonewords","()",""],["send_vectors","Lingo::Attendee::VectorFilter","Lingo/Attendee/VectorFilter.html#method-i-send_vectors","()",""],["set","Lingo::Database::Source","Lingo/Database/Source.html#method-i-set","(db, key, val)",""],["set","Lingo::Database::Source::MultiKey","Lingo/Database/Source/MultiKey.html#method-i-set","(db, key, val)",""],["set","Lingo::Database::Source::MultiValue","Lingo/Database/Source/MultiValue.html#method-i-set","(db, key, val)",""],["set_dic","Lingo::Attendee","Lingo/Attendee.html#method-i-set_dic","()",""],["set_gra","Lingo::Attendee","Lingo/Attendee.html#method-i-set_gra","()",""],["size","Lingo::Database::Source","Lingo/Database/Source.html#method-i-size","()",""],["skip_command","Lingo::Attendee","Lingo/Attendee.html#method-i-skip_command","()",""],["skip_command!","Lingo::Attendee","Lingo/Attendee.html#method-i-skip_command-21","()",""],["spool","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-spool","(path)","<p>Gibt eine Datei zeilenweise in den Ausgabekanal\n"],["start","Lingo","Lingo.html#method-i-start","()",""],["stderr","Lingo::Config","Lingo/Config.html#method-i-stderr","()",""],["stdin","Lingo::Config","Lingo/Config.html#method-i-stdin","()",""],["stdin?","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-stdin-3F","(path)",""],["stdout","Lingo::Config","Lingo/Config.html#method-i-stdout","()",""],["stdout?","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-stdout-3F","(filename)",""],["stem","Lingo::Attendee::Stemmer::Porter","Lingo/Attendee/Stemmer/Porter.html#method-i-stem","(word, found = false)",""],["string_or_io","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-string_or_io","(io)",""],["t","Lingo::Web","Lingo/Web.html#method-i-t","(*t)",""],["talk","Lingo","Lingo.html#method-i-talk","(*args)",""],["talk","Lingo::Attendee","Lingo/Attendee.html#method-i-talk","(obj)",""],["talk","Lingo::Call","Lingo/Call.html#method-i-talk","(str, raw = false)",""],["talk","Lingo::Srv","Lingo/Srv.html#method-i-talk","(q)",""],["test_compound","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-test_compound","(fstr, infix, bstr, level = 1, tail = false)","<p>test_compound() -&gt;  [lex, sta, seq]\n<p>Testet einen definiert zerlegten String auf Kompositum\n"],["to_a","Lingo::AgendaItem","Lingo/AgendaItem.html#method-i-to_a","()",""],["to_a","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-to_a","()",""],["to_a","Lingo::Version","Lingo/Version.html#method-i-to_a","()","<p>Returns array representation.\n"],["to_h","Lingo::Config","Lingo/Config.html#method-i-to_h","()",""],["to_h","Lingo::Database","Lingo/Database.html#method-i-to_h","()",""],["to_json","Lingo::App","Lingo/App.html#method-i-to_json","(q, r)",""],["to_s","Lingo::BackendNotAvailableError","Lingo/BackendNotAvailableError.html#method-i-to_s","()",""],["to_s","Lingo::BackendNotFoundError","Lingo/BackendNotFoundError.html#method-i-to_s","()",""],["to_s","Lingo::ConfigLoadError","Lingo/ConfigLoadError.html#method-i-to_s","()",""],["to_s","Lingo::DatabaseError","Lingo/DatabaseError.html#method-i-to_s","()",""],["to_s","Lingo::FileNotFoundError","Lingo/FileNotFoundError.html#method-i-to_s","()",""],["to_s","Lingo::InvalidDatabaseConfigError","Lingo/InvalidDatabaseConfigError.html#method-i-to_s","()",""],["to_s","Lingo::Language::Lexical","Lingo/Language/Lexical.html#method-i-to_s","()",""],["to_s","Lingo::Language::Token","Lingo/Language/Token.html#method-i-to_s","()",""],["to_s","Lingo::Language::Word","Lingo/Language/Word.html#method-i-to_s","()",""],["to_s","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-to_s","()",""],["to_s","Lingo::LibraryLoadError","Lingo/LibraryLoadError.html#method-i-to_s","()",""],["to_s","Lingo::MissingConfigError","Lingo/MissingConfigError.html#method-i-to_s","()",""],["to_s","Lingo::NameNotFoundError","Lingo/NameNotFoundError.html#method-i-to_s","()",""],["to_s","Lingo::NoDatabaseConfigError","Lingo/NoDatabaseConfigError.html#method-i-to_s","()",""],["to_s","Lingo::NoWritableStoreError","Lingo/NoWritableStoreError.html#method-i-to_s","()",""],["to_s","Lingo::SourceFileNotFoundError","Lingo/SourceFileNotFoundError.html#method-i-to_s","()",""],["to_s","Lingo::TokenizeError","Lingo/TokenizeError.html#method-i-to_s","()",""],["to_s","Lingo::Version","Lingo/Version.html#method-i-to_s","()","<p>Short-cut for version string.\n"],["to_str","Lingo::Language::Lexical","Lingo/Language/Lexical.html#method-i-to_str","()",""],["tokenize","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-tokenize","(line)","<p>tokenize(“Eine Zeile.”)  -&gt;  [:Eine/WORD:, :Zeile/WORD:, :./PUNC:]\n"],["tokenize_line","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-tokenize_line","(line)",""],["tokenize_nest","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-tokenize_nest","(line)",""],["tokenize_open","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-tokenize_open","(line)",""],["tokenize_rule","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-tokenize_rule","(line, rules = @rules)",""],["unknown?","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-unknown-3F","()",""],["uptodate!","Lingo::Database","Lingo/Database.html#method-i-uptodate-21","()",""],["uptodate!","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-uptodate-21","()","<p>Nothing to do.\n"],["uptodate?","Lingo::Database","Lingo/Database.html#method-i-uptodate-3F","(file = @stofile)",""],["uptodate?","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-uptodate-3F","()","<p>Never up-to-date.\n"],["uptodate?","Lingo::Database::SDBMStore","Lingo/Database/SDBMStore.html#method-i-uptodate-3F","()",""],["url_for","Lingo::Web","Lingo/Web.html#method-i-url_for","(path)",""],["usage","Lingo::Ctl","Lingo/Ctl.html#method-i-usage","(msg = nil)",""],["use_backend","Lingo::Database","Lingo/Database.html#method-i-use_backend","(backend = nil, skip_ext = false)",""],["valid_tokens_in_buffer","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-valid_tokens_in_buffer","()",""],["variate","Lingo::Attendee::Variator","Lingo/Attendee/Variator.html#method-i-variate","(variations, from, to)","<p>Variiere die Bestandteile eines Arrays gemäß den Austauschvorgaben.\n<p>variate( &#39;Tiieh&#39;, &#39;ieh&#39;, …\n"],["walk","Lingo","Lingo.html#method-i-walk","(path, options, legacy = true)",""],["warn","Lingo","Lingo.html#method-i-warn","(*msg)",""],["warn","Lingo::Attendee","Lingo/Attendee.html#method-i-warn","(*msg)",""],["warn","Lingo::Config","Lingo/Config.html#method-i-warn","(*msg)",""],["warn","Lingo::Database","Lingo/Database.html#method-i-warn","(*msg)",""],["with_tempfile","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-with_tempfile","(name)",""],["word?","Lingo::Language::Token","Lingo/Language/Token.html#method-i-word-3F","()",""],["COPYING","","COPYING.html","","<p>License for Lingo\n\n<pre>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version ...</pre>\n"],["ChangeLog","","ChangeLog.html","","<p>Revision history for Lingo\n<p>1.8.5 [2014-10-02]\n<p>Dictionary values (projections) are no longer sorted; hence, …\n"],["README","","README.html","","<p>Lingo - A full-featured automatic indexing system\n<p>Version\n<p>Description\n"]]}}