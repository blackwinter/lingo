var search_data = {"index":{"searchIndex":["lingo","agendaitem","attendee","abbreviator","debugger","decomposer","dehyphenizer","formatter","multiworder","nonewordfilter","objectfilter","sequencer","wordsequence","synonymer","textreader","pdffilter","textwriter","tokenizer","variator","vectorfilter","wordsearcher","bufferedattendee","cli","cachable","call","config","configerror","configloaderror","ctl","database","crypter","gdbmstore","hashstore","libcdbstore","sdbmstore","showprogress","source","keyvalue","multikey","multivalue","singleword","wordclass","filenotfounderror","invaliddatabaseconfigerror","language","dictionary","grammar","lexical","lexicalhash","token","word","wordform","lingoerror","missingconfigerror","nodatabaseconfigerror","nowritablestoreerror","reportable","sourcefilenotfounderror","version","string","<<()","<=>()","<=>()","<=>()","<=>()","==()","[]()","[]()","[]()","[]()","[]=()","[]=()","_clear()","_clear()","_clear()","_closed?()","_closed?()","_get()","_lingo_original_downcase()","_lingo_original_downcase!()","_open()","_open()","_open()","_open()","_open()","_set()","_set()","_val()","add()","add_subscriber()","affix_lexicals()","attrs()","backend()","basename()","basepath()","cache_value()","call()","call()","charge_timer()","check_multiword_key()","close()","close()","close()","close()","close()","closed?()","compo_form()","config()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","convert()","convert_line()","convert_line()","convert_line()","convert_line()","convert_line()","copy()","copy_list()","create()","create()","create_and_forward_multiword()","crypt()","ctl()","database_config()","decode()","defaults()","deferred_insert()","dictionary()","dictionary_config()","digest()","do()","do_clearstore()","do_demo()","do_help()","do_path()","do_usage()","do_version()","downcase()","downcase!()","each()","encode()","eql?()","file_type()","file_with_ext()","filter()","filter()","filter_html()","filter_pdf()","find()","find()","find_compositum()","find_file()","find_store()","find_synonyms()","find_word()","flush_lir_buffer()","forward()","forward_buffer()","forward_number_of_token()","forward_number_of_token()","get()","get()","get_array()","get_class()","get_key()","grammar()","has_key?()","hash()","hit?()","identified?()","inc()","infix_lexicals()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init_cachable()","init_reportable()","inspect()","inspect()","invite()","key_to_nodes()","lexical_hash()","lexicals()","lexicals=()","list()","list()","listen()","load_config()","load_config()","min_part_size()","move_to_next_line_and_show_text()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_lexical()","no_args()","nodes_to_key()","norm()","number_of_valid_tokens_in_buffer()","number_of_valid_tokens_in_buffer()","open()","open()","options_for()","opts()","parse_options()","parts()","path_for()","path_for_scope()","permute_compositum()","print()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process_buffer()","process_buffer()","process_buffer()","process_buffer()","process_buffer()","process_buffer?()","process_buffer?()","process_buffer?()","process_buffer?()","process_buffer?()","quit()","realpath_for()","report()","report()","report()","report_status()","report_time()","require_optional()","reset()","retrieve()","run()","scan()","select()","select_with_affix()","select_with_infix()","select_with_suffix()","sendvector()","sequences()","set()","set()","set()","set()","set_dic()","set_gra()","set_spacing_next_line_show_text()","show_text()","show_text_with_positioning()","size()","skip_command()","skip_command!()","sort_result_len()","spool()","sta_for()","start()","stat_timer()","stderr()","stdin()","stdin?()","stdout()","stdout?()","step()","store()","store_ext()","store_ext()","suffix_lexicals()","super_show_text()","talk()","talk()","talk()","talk()","test_compositum()","to_a()","to_a()","to_a()","to_h()","to_h()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","tokenize()","unknown?()","uptodate!()","uptodate!()","uptodate?()","uptodate?()","uptodate?()","valid?()","variate()","walk()","warn()","copying","changelog","readme"],"longSearchIndex":["lingo","lingo::agendaitem","lingo::attendee","lingo::attendee::abbreviator","lingo::attendee::debugger","lingo::attendee::decomposer","lingo::attendee::dehyphenizer","lingo::attendee::formatter","lingo::attendee::multiworder","lingo::attendee::nonewordfilter","lingo::attendee::objectfilter","lingo::attendee::sequencer","lingo::attendee::sequencer::wordsequence","lingo::attendee::synonymer","lingo::attendee::textreader","lingo::attendee::textreader::pdffilter","lingo::attendee::textwriter","lingo::attendee::tokenizer","lingo::attendee::variator","lingo::attendee::vectorfilter","lingo::attendee::wordsearcher","lingo::bufferedattendee","lingo::cli","lingo::cachable","lingo::call","lingo::config","lingo::configerror","lingo::configloaderror","lingo::ctl","lingo::database","lingo::database::crypter","lingo::database::gdbmstore","lingo::database::hashstore","lingo::database::libcdbstore","lingo::database::sdbmstore","lingo::database::showprogress","lingo::database::source","lingo::database::source::keyvalue","lingo::database::source::multikey","lingo::database::source::multivalue","lingo::database::source::singleword","lingo::database::source::wordclass","lingo::filenotfounderror","lingo::invaliddatabaseconfigerror","lingo::language","lingo::language::dictionary","lingo::language::grammar","lingo::language::lexical","lingo::language::lexicalhash","lingo::language::token","lingo::language::word","lingo::language::wordform","lingo::lingoerror","lingo::missingconfigerror","lingo::nodatabaseconfigerror","lingo::nowritablestoreerror","lingo::reportable","lingo::sourcefilenotfounderror","lingo::version","string","lingo::language::word#<<()","lingo::agendaitem#<=>()","lingo::language::lexical#<=>()","lingo::language::word#<=>()","lingo::language::wordform#<=>()","lingo::language::wordform#==()","lingo::config#[]()","lingo::database#[]()","lingo::database::showprogress#[]()","lingo::language::lexicalhash#[]()","lingo::config#[]=()","lingo::database#[]=()","lingo::database#_clear()","lingo::database::hashstore#_clear()","lingo::database::sdbmstore#_clear()","lingo::database#_closed?()","lingo::database::hashstore#_closed?()","lingo::database#_get()","string#_lingo_original_downcase()","string#_lingo_original_downcase!()","lingo::database#_open()","lingo::database::gdbmstore#_open()","lingo::database::hashstore#_open()","lingo::database::libcdbstore#_open()","lingo::database::sdbmstore#_open()","lingo::database#_set()","lingo::database::sdbmstore#_set()","lingo::database#_val()","lingo::reportable#add()","lingo::attendee#add_subscriber()","lingo::language::dictionary#affix_lexicals()","lingo::language::word#attrs()","lingo::database#backend()","lingo::basename()","lingo::basepath()","lingo::cachable#cache_value()","lingo::call()","lingo::call#call()","lingo::attendee#charge_timer()","lingo::attendee::multiworder#check_multiword_key()","lingo::database#close()","lingo::database::hashstore#close()","lingo::language::dictionary#close()","lingo::language::grammar#close()","lingo::language::lexicalhash#close()","lingo::database#closed?()","lingo::language::word#compo_form()","lingo#config()","lingo::attendee::abbreviator#control()","lingo::attendee::debugger#control()","lingo::attendee::decomposer#control()","lingo::attendee::dehyphenizer#control()","lingo::attendee::multiworder#control()","lingo::attendee::nonewordfilter#control()","lingo::attendee::sequencer#control()","lingo::attendee::synonymer#control()","lingo::attendee::textreader#control()","lingo::attendee::textwriter#control()","lingo::attendee::tokenizer#control()","lingo::attendee::variator#control()","lingo::attendee::vectorfilter#control()","lingo::attendee::wordsearcher#control()","lingo::database#convert()","lingo::database::source::keyvalue#convert_line()","lingo::database::source::multikey#convert_line()","lingo::database::source::multivalue#convert_line()","lingo::database::source::singleword#convert_line()","lingo::database::source::wordclass#convert_line()","lingo::ctl#copy()","lingo::ctl#copy_list()","lingo::database#create()","lingo::database::libcdbstore#create()","lingo::attendee::multiworder#create_and_forward_multiword()","lingo::database::crypter#crypt()","lingo::ctl()","lingo#database_config()","lingo::database::crypter#decode()","lingo::cli::defaults()","lingo::bufferedattendee#deferred_insert()","lingo::attendee#dictionary()","lingo#dictionary_config()","lingo::database::crypter#digest()","lingo::ctl#do()","lingo::ctl#do_clearstore()","lingo::ctl#do_demo()","lingo::ctl#do_help()","lingo::ctl#do_path()","lingo::ctl#do_usage()","lingo::ctl#do_version()","string#downcase()","string#downcase!()","lingo::database::source#each()","lingo::database::crypter#encode()","lingo::language::wordform#eql?()","lingo::attendee::textreader#file_type()","lingo::file_with_ext()","lingo::attendee::textreader#filter()","lingo::attendee::textreader::pdffilter::filter()","lingo::attendee::textreader#filter_html()","lingo::attendee::textreader#filter_pdf()","lingo::find()","lingo::ctl#find()","lingo::language::grammar#find_compositum()","lingo::find_file()","lingo::find_store()","lingo::language::dictionary#find_synonyms()","lingo::language::dictionary#find_word()","lingo::attendee::textwriter#flush_lir_buffer()","lingo::attendee#forward()","lingo::bufferedattendee#forward_buffer()","lingo::attendee::dehyphenizer#forward_number_of_token()","lingo::attendee::multiworder#forward_number_of_token()","lingo::database::source::get()","lingo::reportable#get()","lingo::attendee#get_array()","lingo::language::word#get_class()","lingo::attendee#get_key()","lingo::attendee#grammar()","lingo::attendee#has_key?()","lingo::language::wordform#hash()","lingo::cachable#hit?()","lingo::language::wordform#identified?()","lingo::reportable#inc()","lingo::language::dictionary#infix_lexicals()","lingo::attendee::abbreviator#init()","lingo::attendee::debugger#init()","lingo::attendee::decomposer#init()","lingo::attendee::dehyphenizer#init()","lingo::attendee::formatter#init()","lingo::attendee::multiworder#init()","lingo::attendee::nonewordfilter#init()","lingo::attendee::objectfilter#init()","lingo::attendee::sequencer#init()","lingo::attendee::synonymer#init()","lingo::attendee::textreader#init()","lingo::attendee::textwriter#init()","lingo::attendee::tokenizer#init()","lingo::attendee::variator#init()","lingo::attendee::vectorfilter#init()","lingo::attendee::wordsearcher#init()","lingo::cachable#init_cachable()","lingo::reportable#init_reportable()","lingo::agendaitem#inspect()","lingo::language::wordform#inspect()","lingo#invite()","lingo::config#key_to_nodes()","lingo#lexical_hash()","lingo::language::word#lexicals()","lingo::language::word#lexicals=()","lingo::list()","lingo::ctl#list()","lingo::attendee#listen()","lingo::cli#load_config()","lingo::config#load_config()","lingo::language::word#min_part_size()","lingo::attendee::textreader::pdffilter#move_to_next_line_and_show_text()","lingo::new()","lingo::agendaitem::new()","lingo::attendee::new()","lingo::attendee::sequencer::wordsequence::new()","lingo::attendee::textreader::pdffilter::new()","lingo::bufferedattendee::new()","lingo::call::new()","lingo::config::new()","lingo::configerror::new()","lingo::configloaderror::new()","lingo::database::new()","lingo::database::showprogress::new()","lingo::database::source::new()","lingo::database::source::keyvalue::new()","lingo::database::source::multikey::new()","lingo::database::source::multivalue::new()","lingo::database::source::singleword::new()","lingo::database::source::wordclass::new()","lingo::filenotfounderror::new()","lingo::language::dictionary::new()","lingo::language::grammar::new()","lingo::language::lexicalhash::new()","lingo::language::word::new()","lingo::language::wordform::new()","lingo::nowritablestoreerror::new()","lingo::sourcefilenotfounderror::new()","lingo::language::word::new_lexical()","lingo::ctl#no_args()","lingo::config#nodes_to_key()","lingo::language::word#norm()","lingo::attendee::dehyphenizer#number_of_valid_tokens_in_buffer()","lingo::attendee::multiworder#number_of_valid_tokens_in_buffer()","lingo::database::open()","lingo::database#open()","lingo::options_for()","lingo::cli#opts()","lingo::ctl#parse_options()","lingo::language::word#parts()","lingo::path_for()","lingo::ctl#path_for_scope()","lingo::language::grammar#permute_compositum()","lingo::database::showprogress#print()","lingo::attendee::debugger#process()","lingo::attendee::decomposer#process()","lingo::attendee::formatter#process()","lingo::attendee::nonewordfilter#process()","lingo::attendee::objectfilter#process()","lingo::attendee::synonymer#process()","lingo::attendee::textwriter#process()","lingo::attendee::tokenizer#process()","lingo::attendee::variator#process()","lingo::attendee::vectorfilter#process()","lingo::attendee::wordsearcher#process()","lingo::bufferedattendee#process()","lingo::attendee::abbreviator#process_buffer()","lingo::attendee::dehyphenizer#process_buffer()","lingo::attendee::multiworder#process_buffer()","lingo::attendee::sequencer#process_buffer()","lingo::bufferedattendee#process_buffer()","lingo::attendee::abbreviator#process_buffer?()","lingo::attendee::dehyphenizer#process_buffer?()","lingo::attendee::multiworder#process_buffer?()","lingo::attendee::sequencer#process_buffer?()","lingo::bufferedattendee#process_buffer?()","lingo::config#quit()","lingo::realpath_for()","lingo::language::dictionary#report()","lingo::language::grammar#report()","lingo::reportable#report()","lingo::attendee#report_status()","lingo::attendee#report_time()","lingo::require_optional()","lingo#reset()","lingo::cachable#retrieve()","lingo::cli#run()","lingo::attendee::sequencer::wordsequence#scan()","lingo::language::dictionary#select()","lingo::language::dictionary#select_with_affix()","lingo::language::dictionary#select_with_infix()","lingo::language::dictionary#select_with_suffix()","lingo::attendee::vectorfilter#sendvector()","lingo::attendee::sequencer#sequences()","lingo::database::source#set()","lingo::database::source::multikey#set()","lingo::database::source::multivalue#set()","lingo::reportable#set()","lingo::attendee#set_dic()","lingo::attendee#set_gra()","lingo::attendee::textreader::pdffilter#set_spacing_next_line_show_text()","lingo::attendee::textreader::pdffilter#show_text()","lingo::attendee::textreader::pdffilter#show_text_with_positioning()","lingo::database::source#size()","lingo::attendee#skip_command()","lingo::attendee#skip_command!()","lingo::attendee::multiworder#sort_result_len()","lingo::attendee::textreader#spool()","lingo::attendee#sta_for()","lingo#start()","lingo::attendee#stat_timer()","lingo::config#stderr()","lingo::config#stdin()","lingo::attendee::textreader#stdin?()","lingo::config#stdout()","lingo::attendee::textwriter#stdout?()","lingo::database::showprogress#step()","lingo::cachable#store()","lingo::database::gdbmstore#store_ext()","lingo::database::libcdbstore#store_ext()","lingo::language::dictionary#suffix_lexicals()","lingo::attendee::textreader::pdffilter#super_show_text()","lingo#talk()","lingo::talk()","lingo::attendee#talk()","lingo::call#talk()","lingo::language::grammar#test_compositum()","lingo::agendaitem#to_a()","lingo::language::wordform#to_a()","lingo::version::to_a()","lingo::database#to_h()","lingo::database::hashstore#to_h()","lingo::configloaderror#to_s()","lingo::filenotfounderror#to_s()","lingo::invaliddatabaseconfigerror#to_s()","lingo::language::lexical#to_s()","lingo::language::token#to_s()","lingo::language::word#to_s()","lingo::language::wordform#to_s()","lingo::missingconfigerror#to_s()","lingo::nodatabaseconfigerror#to_s()","lingo::nowritablestoreerror#to_s()","lingo::sourcefilenotfounderror#to_s()","lingo::version::to_s()","lingo::language::lexical#to_str()","lingo::attendee::tokenizer#tokenize()","lingo::language::wordform#unknown?()","lingo::database#uptodate!()","lingo::database::hashstore#uptodate!()","lingo::database#uptodate?()","lingo::database::hashstore#uptodate?()","lingo::database::sdbmstore#uptodate?()","lingo::language::grammar#valid?()","lingo::attendee::variator#variate()","lingo::walk()","lingo#warn()","","",""],"info":[["Lingo","","Lingo.html","",""],["Lingo::AgendaItem","","Lingo/AgendaItem.html","",""],["Lingo::Attendee","","Lingo/Attendee.html","","<p>Lingo ist als universelles Indexierungssystem entworfen worden. Seine\nStärke liegt in der einfachen  …\n"],["Lingo::Attendee::Abbreviator","","Lingo/Attendee/Abbreviator.html","","<p>Die Erkennung von Abkürzungen kann auf vielfältige Weise erfolgen. In jedem\nFall sollte eine sichere …\n"],["Lingo::Attendee::Debugger","","Lingo/Attendee/Debugger.html","","<p>Die Attendees von Lingo übergeben Daten über ihre Kommunikationskanäle und\nentweder kommt bei einer komplexen …\n"],["Lingo::Attendee::Decomposer","","Lingo/Attendee/Decomposer.html","","<p>Komposita, also zusammengesetzte Wörter, sind eine Spezialität der\ndeutschen Sprache (z.B. Indexierungssystem …\n"],["Lingo::Attendee::Dehyphenizer","","Lingo/Attendee/Dehyphenizer.html","","<p>Der Dehyphenizer … muss noch dokumentiert werden\n<p>Mögliche Verlinkung\n<p>Erwartet &mdash; Daten vom Typ <strong>Word</strong> z.B. …\n"],["Lingo::Attendee::Formatter","","Lingo/Attendee/Formatter.html","",""],["Lingo::Attendee::MultiWorder","","Lingo/Attendee/MultiWorder.html","","<p>Mit der bisher beschriebenen Vorgehensweise werden die durch den Tokenizer\nerkannten Token aufgelöst …\n"],["Lingo::Attendee::NonewordFilter","","Lingo/Attendee/NonewordFilter.html","","<p>Der NonewordFilter ermöglicht es, alle nicht erkannten Wörter aus dem\nDatenstrom zu selektieren und weiterzuleiten. …\n"],["Lingo::Attendee::ObjectFilter","","Lingo/Attendee/ObjectFilter.html","","<p>Der ObjectFilter ermöglicht es, beliebige Objekte aus dem Datenstrom\nherauszufiltern. Um die gewünschten …\n"],["Lingo::Attendee::Sequencer","","Lingo/Attendee/Sequencer.html","","<p>Der Sequencer ist von seiner Funktion her ähnlich dem Multiworder. Der\nMultiworder nutzt zur Erkennung …\n"],["Lingo::Attendee::Sequencer::WordSequence","","Lingo/Attendee/Sequencer/WordSequence.html","",""],["Lingo::Attendee::Synonymer","","Lingo/Attendee/Synonymer.html","","<p>Der Synonymer untersucht die von anderen Attendees ermittelten Grundformen\neines Wortes und sucht in …\n"],["Lingo::Attendee::TextReader","","Lingo/Attendee/TextReader.html","","<p>Der TextReader ist eine klassische Datenquelle. Er liest eine oder mehrere\nDateien und gibt sie Zeilenweise …\n"],["Lingo::Attendee::TextReader::PDFFilter","","Lingo/Attendee/TextReader/PDFFilter.html","",""],["Lingo::Attendee::TextWriter","","Lingo/Attendee/TextWriter.html","","<p>Der TextWriter ermöglicht die Umleitung des Datenstroms in eine Textdatei.\nDabei werden Objekte, die …\n"],["Lingo::Attendee::Tokenizer","","Lingo/Attendee/Tokenizer.html","","<p>Der Tokenizer zerlegt eine Textzeile in einzelne Token. Dies ist notwendig,\ndamit nachfolgende Attendees …\n"],["Lingo::Attendee::Variator","","Lingo/Attendee/Variator.html","","<p>Der Variator ermöglicht bei nicht erkannten Wörtern den listenbasierten\nAustausch einzelner Wortteile …\n"],["Lingo::Attendee::VectorFilter","","Lingo/Attendee/VectorFilter.html","","<p>Die Hauptaufgabe des VectorFilter ist die Erstellung eines\nDokumenten-Index-Vektor. Dabei werden die …\n"],["Lingo::Attendee::WordSearcher","","Lingo/Attendee/WordSearcher.html","","<p>Der WordSearcher ist das Herzstück von Lingo. Er macht die Hauptarbeit und\nversucht alle Token die nach …\n"],["Lingo::BufferedAttendee","","Lingo/BufferedAttendee.html","",""],["Lingo::CLI","","Lingo/CLI.html","",""],["Lingo::Cachable","","Lingo/Cachable.html","","<p>Provides a simple caching mechanism.\n"],["Lingo::Call","","Lingo/Call.html","",""],["Lingo::Config","","Lingo/Config.html","",""],["Lingo::ConfigError","","Lingo/ConfigError.html","",""],["Lingo::ConfigLoadError","","Lingo/ConfigLoadError.html","",""],["Lingo::Ctl","","Lingo/Ctl.html","",""],["Lingo::Database","","Lingo/Database.html","","<p>Die Klasse Database stellt eine einheitliche Schnittstelle auf\nLingo-Datenbanken bereit. Die Identifizierung …\n"],["Lingo::Database::Crypter","","Lingo/Database/Crypter.html","","<p>Crypter ermöglicht die Ver- und Entschlüsselung von Wörterbüchern\n"],["Lingo::Database::GDBMStore","","Lingo/Database/GDBMStore.html","",""],["Lingo::Database::HashStore","","Lingo/Database/HashStore.html","",""],["Lingo::Database::LibCDBStore","","Lingo/Database/LibCDBStore.html","",""],["Lingo::Database::SDBMStore","","Lingo/Database/SDBMStore.html","",""],["Lingo::Database::ShowProgress","","Lingo/Database/ShowProgress.html","",""],["Lingo::Database::Source","","Lingo/Database/Source.html","","<p>Die Klasse Source stellt eine einheitliche Schnittstelle auf die\nunterschiedlichen Formate von Wörterbuch- …\n"],["Lingo::Database::Source::KeyValue","","Lingo/Database/Source/KeyValue.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>KeyValue</code>. Eine Zeile\n<code>&quot;Fachbegriff*Fachterminus</code> …\n"],["Lingo::Database::Source::MultiKey","","Lingo/Database/Source/MultiKey.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>MultiKey</code>. Eine Zeile <code>&quot;Triumph</code> …\n"],["Lingo::Database::Source::MultiValue","","Lingo/Database/Source/MultiValue.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>MultiValue</code>. Eine Zeile <code>&quot;Triumph</code> …\n"],["Lingo::Database::Source::SingleWord","","Lingo/Database/Source/SingleWord.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>SingleWord</code>. Eine Zeile <code>&quot;Fachbegriff</code> …\n"],["Lingo::Database::Source::WordClass","","Lingo/Database/Source/WordClass.html","","<p>Abgeleitet von Source behandelt die Klasse Dateien mit dem Format\n<code>WordClass</code>. Eine Zeile <code>&quot;essen,essen</code> …\n"],["Lingo::FileNotFoundError","","Lingo/FileNotFoundError.html","",""],["Lingo::InvalidDatabaseConfigError","","Lingo/InvalidDatabaseConfigError.html","",""],["Lingo::Language","","Lingo/Language.html","",""],["Lingo::Language::Dictionary","","Lingo/Language/Dictionary.html","",""],["Lingo::Language::Grammar","","Lingo/Language/Grammar.html","","<p>Die Klasse Grammar beinhaltet grammatikalische Spezialitäten einer Sprache.\nDerzeit findet die Kompositumerkennung …\n"],["Lingo::Language::Lexical","","Lingo/Language/Lexical.html","","<p>Die Klasse Lexical, abgeleitet von der Klasse WordForm, stellt den\nContainer für eine Grundform eines …\n"],["Lingo::Language::LexicalHash","","Lingo/Language/LexicalHash.html","","<p>Die Klasse LexicalHash ermöglicht den Zugriff auf die Lingodatenbanken. Im\nGegensatz zur Klasse Database …\n"],["Lingo::Language::Token","","Lingo/Language/Token.html","","<p>Die Klasse Token, abgeleitet von der Klasse WordForm, stellt den Container\nfür ein einzelnes Wort eines …\n"],["Lingo::Language::Word","","Lingo/Language/Word.html","","<p>Die Klasse Word bündelt spezifische Eigenschaften eines Wortes mit den dazu\nnotwendigen Methoden.\n"],["Lingo::Language::WordForm","","Lingo/Language/WordForm.html","","<p>Die Klasse WordForm ist die Basisklasse für weitere Klassen, die im Rahmen\nder Objektstruktur eines  …\n"],["Lingo::LingoError","","Lingo/LingoError.html","",""],["Lingo::MissingConfigError","","Lingo/MissingConfigError.html","",""],["Lingo::NoDatabaseConfigError","","Lingo/NoDatabaseConfigError.html","",""],["Lingo::NoWritableStoreError","","Lingo/NoWritableStoreError.html","",""],["Lingo::Reportable","","Lingo/Reportable.html","","<p>Provides counters.\n"],["Lingo::SourceFileNotFoundError","","Lingo/SourceFileNotFoundError.html","",""],["Lingo::Version","","Lingo/Version.html","",""],["String","","String.html","",""],["<<","Lingo::Language::Word","Lingo/Language/Word.html#method-i-3C-3C","(*other)",""],["<=>","Lingo::AgendaItem","Lingo/AgendaItem.html#method-i-3C-3D-3E","(other)",""],["<=>","Lingo::Language::Lexical","Lingo/Language/Lexical.html#method-i-3C-3D-3E","(other)",""],["<=>","Lingo::Language::Word","Lingo/Language/Word.html#method-i-3C-3D-3E","(other)",""],["<=>","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-3C-3D-3E","(other)",""],["==","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-3D-3D","(other)",""],["[]","Lingo::Config","Lingo/Config.html#method-i-5B-5D","(key)",""],["[]","Lingo::Database","Lingo/Database.html#method-i-5B-5D","(key)",""],["[]","Lingo::Database::ShowProgress","Lingo/Database/ShowProgress.html#method-i-5B-5D","(value)",""],["[]","Lingo::Language::LexicalHash","Lingo/Language/LexicalHash.html#method-i-5B-5D","(key)",""],["[]=","Lingo::Config","Lingo/Config.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Lingo::Database","Lingo/Database.html#method-i-5B-5D-3D","(key, val)",""],["_clear","Lingo::Database","Lingo/Database.html#method-i-_clear","()",""],["_clear","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-_clear","()",""],["_clear","Lingo::Database::SDBMStore","Lingo/Database/SDBMStore.html#method-i-_clear","()",""],["_closed?","Lingo::Database","Lingo/Database.html#method-i-_closed-3F","()",""],["_closed?","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-_closed-3F","()",""],["_get","Lingo::Database","Lingo/Database.html#method-i-_get","(key)",""],["_lingo_original_downcase","String","String.html#method-i-_lingo_original_downcase","()",""],["_lingo_original_downcase!","String","String.html#method-i-_lingo_original_downcase-21","()",""],["_open","Lingo::Database","Lingo/Database.html#method-i-_open","()",""],["_open","Lingo::Database::GDBMStore","Lingo/Database/GDBMStore.html#method-i-_open","()",""],["_open","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-_open","()",""],["_open","Lingo::Database::LibCDBStore","Lingo/Database/LibCDBStore.html#method-i-_open","()",""],["_open","Lingo::Database::SDBMStore","Lingo/Database/SDBMStore.html#method-i-_open","()",""],["_set","Lingo::Database","Lingo/Database.html#method-i-_set","(key, val)",""],["_set","Lingo::Database::SDBMStore","Lingo/Database/SDBMStore.html#method-i-_set","(key, val)",""],["_val","Lingo::Database","Lingo/Database.html#method-i-_val","(key)",""],["add","Lingo::Reportable","Lingo/Reportable.html#method-i-add","(counter, value)",""],["add_subscriber","Lingo::Attendee","Lingo/Attendee.html#method-i-add_subscriber","(subscriber)",""],["affix_lexicals","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-affix_lexicals","(affix, str)",""],["attrs","Lingo::Language::Word","Lingo/Language/Word.html#method-i-attrs","(compound_parts = true)",""],["backend","Lingo::Database","Lingo/Database.html#method-i-backend","()",""],["basename","Lingo","Lingo.html#method-c-basename","(type, file)",""],["basepath","Lingo","Lingo.html#method-c-basepath","(type, file)",""],["cache_value","Lingo::Cachable","Lingo/Cachable.html#method-i-cache_value","(value)",""],["call","Lingo","Lingo.html#method-c-call","(cfg = find(:config, 'lingo-call'), args = [], &block)",""],["call","Lingo::Call","Lingo/Call.html#method-i-call","()",""],["charge_timer","Lingo::Attendee","Lingo/Attendee.html#method-i-charge_timer","()",""],["check_multiword_key","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-check_multiword_key","( len )","<p>Prüft einen definiert langen Schlüssel ab Position 0 im Buffer\n"],["close","Lingo::Database","Lingo/Database.html#method-i-close","()",""],["close","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-close","()",""],["close","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-close","()",""],["close","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-close","()",""],["close","Lingo::Language::LexicalHash","Lingo/Language/LexicalHash.html#method-i-close","()",""],["closed?","Lingo::Database","Lingo/Database.html#method-i-closed-3F","()",""],["compo_form","Lingo::Language::Word","Lingo/Language/Word.html#method-i-compo_form","()",""],["config","Lingo","Lingo.html#method-i-config","()",""],["control","Lingo::Attendee::Abbreviator","Lingo/Attendee/Abbreviator.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::Debugger","Lingo/Attendee/Debugger.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::Decomposer","Lingo/Attendee/Decomposer.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::NonewordFilter","Lingo/Attendee/NonewordFilter.html#method-i-control","(cmd, par)","<p>Control behandelt die Kommandos zum Öffnen und Schließen einer Datei. Für\njede Datei wird ein neuer  …\n"],["control","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::Synonymer","Lingo/Attendee/Synonymer.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-control","(cmd, param)",""],["control","Lingo::Attendee::Variator","Lingo/Attendee/Variator.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::VectorFilter","Lingo/Attendee/VectorFilter.html#method-i-control","(cmd, par)",""],["control","Lingo::Attendee::WordSearcher","Lingo/Attendee/WordSearcher.html#method-i-control","(cmd, par)",""],["convert","Lingo::Database","Lingo/Database.html#method-i-convert","(verbose = @lingo.config.stderr.tty?)",""],["convert_line","Lingo::Database::Source::KeyValue","Lingo/Database/Source/KeyValue.html#method-i-convert_line","(line, key, val)",""],["convert_line","Lingo::Database::Source::MultiKey","Lingo/Database/Source/MultiKey.html#method-i-convert_line","(line, key, val)",""],["convert_line","Lingo::Database::Source::MultiValue","Lingo/Database/Source/MultiValue.html#method-i-convert_line","(line, key, val)",""],["convert_line","Lingo::Database::Source::SingleWord","Lingo/Database/Source/SingleWord.html#method-i-convert_line","(line, key, val)",""],["convert_line","Lingo::Database::Source::WordClass","Lingo/Database/Source/WordClass.html#method-i-convert_line","(line, key, val)",""],["copy","Lingo::Ctl","Lingo/Ctl.html#method-i-copy","(what)",""],["copy_list","Lingo::Ctl","Lingo/Ctl.html#method-i-copy_list","(what)",""],["create","Lingo::Database","Lingo/Database.html#method-i-create","()",""],["create","Lingo::Database::LibCDBStore","Lingo/Database/LibCDBStore.html#method-i-create","()",""],["create_and_forward_multiword","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-create_and_forward_multiword","( len, lexicals )",""],["crypt","Lingo::Database::Crypter","Lingo/Database/Crypter.html#method-i-crypt","(k, v)",""],["ctl","Lingo","Lingo.html#method-c-ctl","()",""],["database_config","Lingo","Lingo.html#method-i-database_config","(id)",""],["decode","Lingo::Database::Crypter","Lingo/Database/Crypter.html#method-i-decode","(key, val)",""],["defaults","Lingo::CLI","Lingo/CLI.html#method-c-defaults","()",""],["deferred_insert","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-deferred_insert","(pos, obj)",""],["dictionary","Lingo::Attendee","Lingo/Attendee.html#method-i-dictionary","(src, mod)",""],["dictionary_config","Lingo","Lingo.html#method-i-dictionary_config","()",""],["digest","Lingo::Database::Crypter","Lingo/Database/Crypter.html#method-i-digest","(key)",""],["do","Lingo::Ctl","Lingo/Ctl.html#method-i-do","()",""],["do_clearstore","Lingo::Ctl","Lingo/Ctl.html#method-i-do_clearstore","()",""],["do_demo","Lingo::Ctl","Lingo/Ctl.html#method-i-do_demo","()",""],["do_help","Lingo::Ctl","Lingo/Ctl.html#method-i-do_help","(opts = nil)",""],["do_path","Lingo::Ctl","Lingo/Ctl.html#method-i-do_path","()",""],["do_usage","Lingo::Ctl","Lingo/Ctl.html#method-i-do_usage","(msg = nil)",""],["do_version","Lingo::Ctl","Lingo/Ctl.html#method-i-do_version","(doit = true)",""],["downcase","String","String.html#method-i-downcase","()",""],["downcase!","String","String.html#method-i-downcase-21","()",""],["each","Lingo::Database::Source","Lingo/Database/Source.html#method-i-each","()",""],["encode","Lingo::Database::Crypter","Lingo/Database/Crypter.html#method-i-encode","(key, val)",""],["eql?","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-eql-3F","(other)",""],["file_type","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-file_type","(filename, file)",""],["file_with_ext","Lingo","Lingo.html#method-c-file_with_ext","(file, options)",""],["filter","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-filter","(filename, &block)",""],["filter","Lingo::Attendee::TextReader::PDFFilter","Lingo/Attendee/TextReader/PDFFilter.html#method-c-filter","(file, &block)",""],["filter_html","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-filter_html","(file, xml = false)",""],["filter_pdf","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-filter_pdf","(file, &block)",""],["find","Lingo","Lingo.html#method-c-find","(type, file, options = {})",""],["find","Lingo::Ctl","Lingo/Ctl.html#method-i-find","(what, doit = true)",""],["find_compositum","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-find_compositum","(str, level = 1, tail = false)","<p>find_compositum(str) -&gt; word wenn level=1 find_compositum(str) -&gt;\n[lex, sta] wenn level!=1\n<p>find_compositum …\n"],["find_file","Lingo","Lingo.html#method-c-find_file","(file, path, options)",""],["find_store","Lingo","Lingo.html#method-c-find_store","(file, path, options)",""],["find_synonyms","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-find_synonyms","(obj)",""],["find_word","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-find_word","(str)","<p><em>dic</em>.find_word( <em>aString</em> ) -&gt; <em>aNewWord</em>\n<p>Erstellt aus dem String ein Wort und sucht nach diesem im Wörterbuch. …\n"],["flush_lir_buffer","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-flush_lir_buffer","()",""],["forward","Lingo::Attendee","Lingo/Attendee.html#method-i-forward","(obj, param = nil)",""],["forward_buffer","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-forward_buffer","()",""],["forward_number_of_token","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-forward_number_of_token","( len, count_punc = true )","<p>Leitet ‘len’ Token weiter\n"],["forward_number_of_token","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-forward_number_of_token","( len, count_punc = true )","<p>Leitet ‘len’ Token weiter\n"],["get","Lingo::Database::Source","Lingo/Database/Source.html#method-c-get","(name, *args)",""],["get","Lingo::Reportable","Lingo/Reportable.html#method-i-get","(counter)",""],["get_array","Lingo::Attendee","Lingo/Attendee.html#method-i-get_array","(key, default = nil)",""],["get_class","Lingo::Language::Word","Lingo/Language/Word.html#method-i-get_class","(wc_re)","<p>Gibt genau die Grundform der Wortklasse zurück, die der RegExp des\nÜbergabe-Parameters entspricht, z.B. …\n"],["get_key","Lingo::Attendee","Lingo/Attendee.html#method-i-get_key","(key, default = nodefault = Object.new)",""],["grammar","Lingo::Attendee","Lingo/Attendee.html#method-i-grammar","(src, mod)",""],["has_key?","Lingo::Attendee","Lingo/Attendee.html#method-i-has_key-3F","(key)",""],["hash","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-hash","()",""],["hit?","Lingo::Cachable","Lingo/Cachable.html#method-i-hit-3F","(key)",""],["identified?","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-identified-3F","()",""],["inc","Lingo::Reportable","Lingo/Reportable.html#method-i-inc","(counter)",""],["infix_lexicals","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-infix_lexicals","(str)","<p><em>dic</em>.gap_lexicals( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Gibt alle möglichen Lexicals zurück, die von der Endung …\n"],["init","Lingo::Attendee::Abbreviator","Lingo/Attendee/Abbreviator.html#method-i-init","()",""],["init","Lingo::Attendee::Debugger","Lingo/Attendee/Debugger.html#method-i-init","()",""],["init","Lingo::Attendee::Decomposer","Lingo/Attendee/Decomposer.html#method-i-init","()",""],["init","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-init","()",""],["init","Lingo::Attendee::Formatter","Lingo/Attendee/Formatter.html#method-i-init","()",""],["init","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-init","()",""],["init","Lingo::Attendee::NonewordFilter","Lingo/Attendee/NonewordFilter.html#method-i-init","()",""],["init","Lingo::Attendee::ObjectFilter","Lingo/Attendee/ObjectFilter.html#method-i-init","()",""],["init","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-init","()",""],["init","Lingo::Attendee::Synonymer","Lingo/Attendee/Synonymer.html#method-i-init","()",""],["init","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-init","()","<p>TODO: FILE und LIR-FILE TODO: lir-record-pattern abkürzen Interpretation\nder Parameter\n"],["init","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-init","()",""],["init","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-init","()",""],["init","Lingo::Attendee::Variator","Lingo/Attendee/Variator.html#method-i-init","()",""],["init","Lingo::Attendee::VectorFilter","Lingo/Attendee/VectorFilter.html#method-i-init","()",""],["init","Lingo::Attendee::WordSearcher","Lingo/Attendee/WordSearcher.html#method-i-init","()",""],["init_cachable","Lingo::Cachable","Lingo/Cachable.html#method-i-init_cachable","()",""],["init_reportable","Lingo::Reportable","Lingo/Reportable.html#method-i-init_reportable","(prefix = nil)",""],["inspect","Lingo::AgendaItem","Lingo/AgendaItem.html#method-i-inspect","()",""],["inspect","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-inspect","()",""],["invite","Lingo","Lingo.html#method-i-invite","(list = config['meeting/attendees'])",""],["key_to_nodes","Lingo::Config","Lingo/Config.html#method-i-key_to_nodes","(key)",""],["lexical_hash","Lingo","Lingo.html#method-i-lexical_hash","(src)",""],["lexicals","Lingo::Language::Word","Lingo/Language/Word.html#method-i-lexicals","(compound_parts = true)",""],["lexicals=","Lingo::Language::Word","Lingo/Language/Word.html#method-i-lexicals-3D","(lexis)",""],["list","Lingo","Lingo.html#method-c-list","(type, options = {})",""],["list","Lingo::Ctl","Lingo/Ctl.html#method-i-list","(what, doit = true)",""],["listen","Lingo::Attendee","Lingo/Attendee.html#method-i-listen","(obj)",""],["load_config","Lingo::CLI","Lingo/CLI.html#method-i-load_config","(*)",""],["load_config","Lingo::Config","Lingo/Config.html#method-i-load_config","(key, type = key.to_sym)",""],["min_part_size","Lingo::Language::Word","Lingo/Language/Word.html#method-i-min_part_size","()",""],["move_to_next_line_and_show_text","Lingo::Attendee::TextReader::PDFFilter","Lingo/Attendee/TextReader/PDFFilter.html#method-i-move_to_next_line_and_show_text","(string, *params)",""],["new","Lingo","Lingo.html#method-c-new","(*args)",""],["new","Lingo::AgendaItem","Lingo/AgendaItem.html#method-c-new","(cmd, param = nil)",""],["new","Lingo::Attendee","Lingo/Attendee.html#method-c-new","(config, lingo)",""],["new","Lingo::Attendee::Sequencer::WordSequence","Lingo/Attendee/Sequencer/WordSequence.html#method-c-new","(wordclasses, format)",""],["new","Lingo::Attendee::TextReader::PDFFilter","Lingo/Attendee/TextReader/PDFFilter.html#method-c-new","(&block)",""],["new","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-c-new","(config, lingo)",""],["new","Lingo::Call","Lingo/Call.html#method-c-new","(args = [])",""],["new","Lingo::Config","Lingo/Config.html#method-c-new","(*args)",""],["new","Lingo::ConfigError","Lingo/ConfigError.html#method-c-new","(id)",""],["new","Lingo::ConfigLoadError","Lingo/ConfigLoadError.html#method-c-new","(err)",""],["new","Lingo::Database","Lingo/Database.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::ShowProgress","Lingo/Database/ShowProgress.html#method-c-new","(src, max, act = true)",""],["new","Lingo::Database::Source","Lingo/Database/Source.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::KeyValue","Lingo/Database/Source/KeyValue.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::MultiKey","Lingo/Database/Source/MultiKey.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::MultiValue","Lingo/Database/Source/MultiValue.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::SingleWord","Lingo/Database/Source/SingleWord.html#method-c-new","(id, lingo)",""],["new","Lingo::Database::Source::WordClass","Lingo/Database/Source/WordClass.html#method-c-new","(id, lingo)",""],["new","Lingo::FileNotFoundError","Lingo/FileNotFoundError.html#method-c-new","(name)",""],["new","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-c-new","(config, lingo)",""],["new","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-c-new","(config, lingo)","<p>initialize(config, dictionary_config) -&gt; <em>Grammar</em> config =\nAttendee-spezifische Parameter dictionary_config …\n"],["new","Lingo::Language::LexicalHash","Lingo/Language/LexicalHash.html#method-c-new","(id, lingo)",""],["new","Lingo::Language::Word","Lingo/Language/Word.html#method-c-new","(form, attr = WA_UNSET)","<p>Exakte Representation der originären Zeichenkette, so wie sie im Satz\ngefunden wurde, z.B. <code>form = &quot;RubyLing&quot;</code> …\n"],["new","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-c-new","(form, attr = '-')",""],["new","Lingo::NoWritableStoreError","Lingo/NoWritableStoreError.html#method-c-new","(file, path)",""],["new","Lingo::SourceFileNotFoundError","Lingo/SourceFileNotFoundError.html#method-c-new","(name, id)",""],["new_lexical","Lingo::Language::Word","Lingo/Language/Word.html#method-c-new_lexical","(form, attr, lex_attr)",""],["no_args","Lingo::Ctl","Lingo/Ctl.html#method-i-no_args","()",""],["nodes_to_key","Lingo::Config","Lingo/Config.html#method-i-nodes_to_key","(nodes)",""],["norm","Lingo::Language::Word","Lingo/Language/Word.html#method-i-norm","()",""],["number_of_valid_tokens_in_buffer","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-number_of_valid_tokens_in_buffer","()","<p>Liefert die Anzahl gültiger Token zurück\n"],["number_of_valid_tokens_in_buffer","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-number_of_valid_tokens_in_buffer","()","<p>Liefert die Anzahl gültiger Token zurück\n"],["open","Lingo::Database","Lingo/Database.html#method-c-open","(*args, &block)",""],["open","Lingo::Database","Lingo/Database.html#method-i-open","()",""],["options_for","Lingo","Lingo.html#method-c-options_for","(type, options = {})",""],["opts","Lingo::CLI","Lingo/CLI.html#method-i-opts","(opts)",""],["parse_options","Lingo::Ctl","Lingo/Ctl.html#method-i-parse_options","()",""],["parts","Lingo::Language::Word","Lingo/Language/Word.html#method-i-parts","()",""],["path_for","Lingo","Lingo.html#method-c-path_for","(options)",""],["path_for_scope","Lingo::Ctl","Lingo/Ctl.html#method-i-path_for_scope","(scope = OPTIONS[:scope])",""],["permute_compositum","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-permute_compositum","(str, level, tail)","<p>permute_compositum( <em>aString</em> ) -&gt;  [lex, sta, seq]\n"],["print","Lingo::Database::ShowProgress","Lingo/Database/ShowProgress.html#method-i-print","(*args)",""],["process","Lingo::Attendee::Debugger","Lingo/Attendee/Debugger.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Decomposer","Lingo/Attendee/Decomposer.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Formatter","Lingo/Attendee/Formatter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::NonewordFilter","Lingo/Attendee/NonewordFilter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::ObjectFilter","Lingo/Attendee/ObjectFilter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Synonymer","Lingo/Attendee/Synonymer.html#method-i-process","(obj)",""],["process","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-process","(obj)",""],["process","Lingo::Attendee::Variator","Lingo/Attendee/Variator.html#method-i-process","(obj)",""],["process","Lingo::Attendee::VectorFilter","Lingo/Attendee/VectorFilter.html#method-i-process","(obj)",""],["process","Lingo::Attendee::WordSearcher","Lingo/Attendee/WordSearcher.html#method-i-process","(obj)",""],["process","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-process","(obj)",""],["process_buffer","Lingo::Attendee::Abbreviator","Lingo/Attendee/Abbreviator.html#method-i-process_buffer","()",""],["process_buffer","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-process_buffer","()",""],["process_buffer","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-process_buffer","()",""],["process_buffer","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-process_buffer","()",""],["process_buffer","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-process_buffer","()",""],["process_buffer?","Lingo::Attendee::Abbreviator","Lingo/Attendee/Abbreviator.html#method-i-process_buffer-3F","()",""],["process_buffer?","Lingo::Attendee::Dehyphenizer","Lingo/Attendee/Dehyphenizer.html#method-i-process_buffer-3F","()",""],["process_buffer?","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-process_buffer-3F","()",""],["process_buffer?","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-process_buffer-3F","()",""],["process_buffer?","Lingo::BufferedAttendee","Lingo/BufferedAttendee.html#method-i-process_buffer-3F","()",""],["quit","Lingo::Config","Lingo/Config.html#method-i-quit","(*args)",""],["realpath_for","Lingo","Lingo.html#method-c-realpath_for","(pn, path)",""],["report","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-report","()",""],["report","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-report","()",""],["report","Lingo::Reportable","Lingo/Reportable.html#method-i-report","()",""],["report_status","Lingo::Attendee","Lingo/Attendee.html#method-i-report_status","()",""],["report_time","Lingo::Attendee","Lingo/Attendee.html#method-i-report_time","()",""],["require_optional","Lingo","Lingo.html#method-c-require_optional","(lib)",""],["reset","Lingo","Lingo.html#method-i-reset","(close = true)",""],["retrieve","Lingo::Cachable","Lingo/Cachable.html#method-i-retrieve","(key)",""],["run","Lingo::CLI","Lingo/CLI.html#method-i-run","(arguments)",""],["scan","Lingo::Attendee::Sequencer::WordSequence","Lingo/Attendee/Sequencer/WordSequence.html#method-i-scan","(sequence)",""],["select","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-select","(str)","<p><em>dic</em>.select( <em>aString</em> ) -&gt; <em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten Treffer …\n"],["select_with_affix","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-select_with_affix","(affix, str)",""],["select_with_infix","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-select_with_infix","(str)","<p><em>dic</em>.select_with_infix( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten …\n"],["select_with_suffix","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-select_with_suffix","(str)","<p><em>dic</em>.select_with_suffix( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten …\n"],["sendVector","Lingo::Attendee::VectorFilter","Lingo/Attendee/VectorFilter.html#method-i-sendVector","()",""],["sequences","Lingo::Attendee::Sequencer","Lingo/Attendee/Sequencer.html#method-i-sequences","(map)",""],["set","Lingo::Database::Source","Lingo/Database/Source.html#method-i-set","(db, key, val)",""],["set","Lingo::Database::Source::MultiKey","Lingo/Database/Source/MultiKey.html#method-i-set","(db, key, val)",""],["set","Lingo::Database::Source::MultiValue","Lingo/Database/Source/MultiValue.html#method-i-set","(db, key, val)",""],["set","Lingo::Reportable","Lingo/Reportable.html#method-i-set","(counter, value)",""],["set_dic","Lingo::Attendee","Lingo/Attendee.html#method-i-set_dic","()",""],["set_gra","Lingo::Attendee","Lingo/Attendee.html#method-i-set_gra","()",""],["set_spacing_next_line_show_text","Lingo::Attendee::TextReader::PDFFilter","Lingo/Attendee/TextReader/PDFFilter.html#method-i-set_spacing_next_line_show_text","(string, *params)",""],["show_text","Lingo::Attendee::TextReader::PDFFilter","Lingo/Attendee/TextReader/PDFFilter.html#method-i-show_text","(string, *params)",""],["show_text_with_positioning","Lingo::Attendee::TextReader::PDFFilter","Lingo/Attendee/TextReader/PDFFilter.html#method-i-show_text_with_positioning","(params, *)",""],["size","Lingo::Database::Source","Lingo/Database/Source.html#method-i-size","()",""],["skip_command","Lingo::Attendee","Lingo/Attendee.html#method-i-skip_command","()",""],["skip_command!","Lingo::Attendee","Lingo/Attendee.html#method-i-skip_command-21","()",""],["sort_result_len","Lingo::Attendee::MultiWorder","Lingo/Attendee/MultiWorder.html#method-i-sort_result_len","( result )","<p>Ermittelt die maximale Ergebnislänge\n"],["spool","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-spool","(filename)","<p>Gibt eine Datei zeilenweise in den Ausgabekanal\n"],["sta_for","Lingo::Attendee","Lingo/Attendee.html#method-i-sta_for","(key)",""],["start","Lingo","Lingo.html#method-i-start","(report_status = config['status'], report_time = config['perfmon'])",""],["stat_timer","Lingo::Attendee","Lingo/Attendee.html#method-i-stat_timer","(key)",""],["stderr","Lingo::Config","Lingo/Config.html#method-i-stderr","()",""],["stdin","Lingo::Config","Lingo/Config.html#method-i-stdin","()",""],["stdin?","Lingo::Attendee::TextReader","Lingo/Attendee/TextReader.html#method-i-stdin-3F","(filename)",""],["stdout","Lingo::Config","Lingo/Config.html#method-i-stdout","()",""],["stdout?","Lingo::Attendee::TextWriter","Lingo/Attendee/TextWriter.html#method-i-stdout-3F","(filename)",""],["step","Lingo::Database::ShowProgress","Lingo/Database/ShowProgress.html#method-i-step","()",""],["store","Lingo::Cachable","Lingo/Cachable.html#method-i-store","(key, value)",""],["store_ext","Lingo::Database::GDBMStore","Lingo/Database/GDBMStore.html#method-i-store_ext","()",""],["store_ext","Lingo::Database::LibCDBStore","Lingo/Database/LibCDBStore.html#method-i-store_ext","()",""],["suffix_lexicals","Lingo::Language::Dictionary","Lingo/Language/Dictionary.html#method-i-suffix_lexicals","(str)","<p><em>dic</em>.suffix_lexicals( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Gibt alle möglichen Lexicals zurück, die von der …\n"],["super_show_text","Lingo::Attendee::TextReader::PDFFilter","Lingo/Attendee/TextReader/PDFFilter.html#method-i-super_show_text","(string, *params)",""],["talk","Lingo","Lingo.html#method-i-talk","()",""],["talk","Lingo","Lingo.html#method-c-talk","(*args)",""],["talk","Lingo::Attendee","Lingo/Attendee.html#method-i-talk","(obj)",""],["talk","Lingo::Call","Lingo/Call.html#method-i-talk","(str)",""],["test_compositum","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-test_compositum","(fstr, infix, bstr, level, tail)","<p>test_compositum() -&gt;  [lex, sta, seq]\n<p>Testet einen definiert zerlegten String auf Kompositum\n"],["to_a","Lingo::AgendaItem","Lingo/AgendaItem.html#method-i-to_a","()",""],["to_a","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-to_a","()",""],["to_a","Lingo::Version","Lingo/Version.html#method-c-to_a","()","<p>Returns array representation.\n"],["to_h","Lingo::Database","Lingo/Database.html#method-i-to_h","()",""],["to_h","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-to_h","()",""],["to_s","Lingo::ConfigLoadError","Lingo/ConfigLoadError.html#method-i-to_s","()",""],["to_s","Lingo::FileNotFoundError","Lingo/FileNotFoundError.html#method-i-to_s","()",""],["to_s","Lingo::InvalidDatabaseConfigError","Lingo/InvalidDatabaseConfigError.html#method-i-to_s","()",""],["to_s","Lingo::Language::Lexical","Lingo/Language/Lexical.html#method-i-to_s","()",""],["to_s","Lingo::Language::Token","Lingo/Language/Token.html#method-i-to_s","()",""],["to_s","Lingo::Language::Word","Lingo/Language/Word.html#method-i-to_s","()",""],["to_s","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-to_s","()",""],["to_s","Lingo::MissingConfigError","Lingo/MissingConfigError.html#method-i-to_s","()",""],["to_s","Lingo::NoDatabaseConfigError","Lingo/NoDatabaseConfigError.html#method-i-to_s","()",""],["to_s","Lingo::NoWritableStoreError","Lingo/NoWritableStoreError.html#method-i-to_s","()",""],["to_s","Lingo::SourceFileNotFoundError","Lingo/SourceFileNotFoundError.html#method-i-to_s","()",""],["to_s","Lingo::Version","Lingo/Version.html#method-c-to_s","()","<p>Short-cut for version string.\n"],["to_str","Lingo::Language::Lexical","Lingo/Language/Lexical.html#method-i-to_str","()",""],["tokenize","Lingo::Attendee::Tokenizer","Lingo/Attendee/Tokenizer.html#method-i-tokenize","(textline)","<p>tokenize(“Eine Zeile.”)  -&gt;  [:Eine/WORD:, :Zeile/WORD:, :./PUNC:]\n"],["unknown?","Lingo::Language::WordForm","Lingo/Language/WordForm.html#method-i-unknown-3F","()",""],["uptodate!","Lingo::Database","Lingo/Database.html#method-i-uptodate-21","()",""],["uptodate!","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-uptodate-21","()",""],["uptodate?","Lingo::Database","Lingo/Database.html#method-i-uptodate-3F","(file = @dbm_name)",""],["uptodate?","Lingo::Database::HashStore","Lingo/Database/HashStore.html#method-i-uptodate-3F","()",""],["uptodate?","Lingo::Database::SDBMStore","Lingo/Database/SDBMStore.html#method-i-uptodate-3F","()",""],["valid?","Lingo::Language::Grammar","Lingo/Language/Grammar.html#method-i-valid-3F","(str, sta, seq)",""],["variate","Lingo::Attendee::Variator","Lingo/Attendee/Variator.html#method-i-variate","(variation_list, from, to)","<p>Variiere die Bestandteile eines Arrays gemäß den Austauschvorgaben.\n<p>variate( ‘Tiieh’, ‘ieh’, ‘sch’ ) =&gt; …\n"],["walk","Lingo","Lingo.html#method-c-walk","(path, options, legacy = true)",""],["warn","Lingo","Lingo.html#method-i-warn","(*msg)",""],["COPYING","","COPYING.html","","<p>License for Lingo\n\n<pre>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version ...</pre>\n"],["ChangeLog","","ChangeLog.html","","<p>Revision history for Lingo\n<p>1.8.1 [2012-02-19]\n<p>Introduced alternative storage backends, mainly to circumvent …\n"],["README","","README.html","","<p>Lingo - A full-featured automatic indexing system\n<p>\n<p>Version\n"]]}}